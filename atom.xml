<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[zxhfirefox's Blog]]></title>
  <link href="http://zxhfirefox.github.io/atom.xml" rel="self"/>
  <link href="http://zxhfirefox.github.io/"/>
  <updated>2014-10-06T15:14:09+08:00</updated>
  <id>http://zxhfirefox.github.io/</id>
  <author>
    <name><![CDATA[zxhfirefox]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Language Guide: Enumetations]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/10/06/language-guide-enumetations/"/>
    <updated>2014-10-06T14:42:46+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/10/06/language-guide-enumetations</id>
    <content type="html"><![CDATA[<p>枚举是给一系列相关的值定义一个通用的类型，让你在使用这些值的时候可以保证类型安全。</p>

<p>如果你熟悉C，你应该知道C里的枚举是把一些有意义的名字附值给一系列整数。Swift里的枚举更加灵活，你不需要为每一个成员都定义一个值。如果枚举成员有对应的值（raw值），这个值可以是整数，字符串，字符，或是浮点数。（注：没有关联值的枚举是Hashable的）</p>

<p>另外，枚举成员可以给出任何类型的关联值。更像其他语言里的unions和variants。你可以把相关成员的通用集合定义为枚举的一部分，每一部分又可以和不同类型的关联值关联到一起。</p>

<p>在Swift里，枚举是头等成员。它又有许多成员是以前只有类才有的特性，例如，用来更好给出枚举当前值的计算属性，和枚举值相关的成员函数。枚举还可以定义初始化函数来给出枚举初始值，也可以被扩展来增加原来没有的功能，还能够实现协议。</p>

<h5>枚举语法</h5>

<p>用enum关键字定义枚举。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="n">SomeEnumeration</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="n">CompassPoint</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">North</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">South</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">East</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">West</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义在枚举里的值（North&hellip;)叫做枚举成员值（或成员）。case关键字用来标示新的成员。</p>

<pre><code>注意
和C,ObjC不一样，Swift的枚举成员并没有默认的和整数相关联。
</code></pre>

<p>多个枚举值可以写在同一行，用逗号隔开。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="n">Planet</span><span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">Mercury</span><span class="p">,</span> <span class="n">Venus</span><span class="p">,</span> <span class="n">Earth</span><span class="p">,</span> <span class="n">Mars</span><span class="p">,</span> <span class="n">Jupiter</span><span class="p">,</span> <span class="n">Saturn</span><span class="p">,</span> <span class="n">Uranus</span><span class="p">,</span> <span class="n">Neptune</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>每个枚举都定义了一个新的类型。和其他类型一样，都应该由大写字母开头。用单数不要用复数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">direction</span> <span class="o">=</span> <span class="n">CompassPoint</span><span class="p">.</span><span class="n">West</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面direction的类型被推断为CompassPoint。在此之后，你可以直接用 . 来更新它的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">direction</span> <span class="o">=</span> <span class="p">.</span><span class="n">East</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为它的类型已经知道了，所以你不用再写出它的类型。</p>

<h5>用switch语句来匹配枚举值</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">direction</span> <span class="o">=</span> <span class="p">.</span><span class="n">South</span>
</span><span class='line'><span class="k">switch</span> <span class="n">direction</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">North</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Lots of planets have a north&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">South</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Watch out for penguins&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">East</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Where the sun rises&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">West</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Where the skies are blue&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在流程控制里，我们提到switch语句必须是穷举的。如果上面我们没有写.West的case，这段代码就无法编译。穷举保证了枚举值不会被忽略。</p>

<p>如果不适合给每个枚举值都写case，可以使用default来做。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">somePlanet</span> <span class="o">=</span> <span class="n">Planet</span><span class="p">.</span><span class="n">Earth</span>
</span><span class='line'><span class="k">switch</span> <span class="n">somePlanet</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">.</span><span class="nl">Earth</span><span class="p">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Mostly harmless&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Not a safe place for humans&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>关联值（associated value）</h5>

<p>上面的例子里，枚举值都是使用他们自己作为值。但是有时候，你如果能够给枚举值关联一些其他类型的值会很有用。这将让你可以存储额外的信息到每个枚举值，并使他们在用的时候可以变化。</p>

<p>你可以给枚举值定义任何类型的关联值，而且同一个枚举下不同枚举值可以有不同类型的关联值。像这样子的枚举在其他语言里，可能叫discriminated unions，tagged unions，或variants。</p>

<p>例如，一个库存管理系统，需要记录两种不同的条码，有些商品用的UPC-A的1维条码，只用到了0-9这些数字，每一个条码都有一个数字系统号，然后5个制造商号，5个产品号和一个校检号。另外一个些商品使用二维码来标示，可以使用IOS 8859-1的任何字符，可以编码一个长度达2953的字符串。</p>

<p>如果我们可以把UPC-A条码表示为4个整数，二维码表示为一个字符串将会很方便。</p>

<p>在Swift里，定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="n">Barcode</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">UPCA</span><span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">QRCode</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码理解为，定义一个枚举类型，叫Barcode，它要么是一个关联了4个整数的UPCA值，要么是一个关联了一个字符串的QRCode值。</p>

<p>这个定义只是定义了类型，并没有给出真实的值。任何Barcode类型的常量或变量都可以存储Barcode.UPCA或Barcode.QRCode。</p>

<p>新的barcode可以用任何一个case来创建。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">code</span> <span class="o">=</span> <span class="n">Barcode</span><span class="p">.</span><span class="n">UPCA</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">85909</span><span class="p">,</span><span class="mi">51226</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>同一个产品可以被赋给不同的枚举值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">code</span> <span class="o">=</span> <span class="p">.</span><span class="n">QRCode</span><span class="p">(</span><span class="s">&quot;ABCDEFGHIJKLMNOP&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Barcode类型的常量或变量可以存储UPCA和QRCode任意一种，但是在任何时间都只能是一种。</p>

<p>barcode的值也可以通过switch来区分，不过，这次，关联值可以被拆解出来作为switch语句的一部分。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">switch</span> <span class="n">productBarcode</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">UPCA</span><span class="p">(</span><span class="n">numberSystem</span><span class="p">,</span> <span class="n">manufacturer</span><span class="p">,</span> <span class="n">product</span><span class="p">,</span> <span class="n">check</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;UPC-A: \(numberSystem), \(manufacturer), \(product), \(check).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span> <span class="p">.</span><span class="n">QRCode</span><span class="p">(</span><span class="n">productCode</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;QR code: \(productCode).&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注：这里我们也可以在多写一些分支加上where语句。</p>

<h6>原始值（raw value）</h6>

<p>除了上面说的关联值，作为另外一种方式，枚举可以有原始值，他们必须是同一类型的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="nl">ASCIIControlCharacter</span> <span class="p">:</span> <span class="n">Character</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">Tab</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">LineFeed</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">CarriageReturn</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\r</span><span class="s">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里ASCIIControlCharacter的原始值的类型是Character。</p>

<p>注意原始值和关联值是不一样的。原始值在你定义枚举时就已经给出了。对于某一个枚举成员，原始值是固定不变的。关联值是你在给一个常量或变量赋值时才给出，而且每次都可以不一样。</p>

<p>原始值可以是字符串，字符，整数或浮点数。每一个原始值在枚举定义时必须唯一。如果是整数，会自动递增。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">enum</span> <span class="nl">Planet</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">Mercury</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Venus</span><span class="p">,</span> <span class="n">Earth</span><span class="p">,</span> <span class="n">Mars</span><span class="p">,</span> <span class="n">Jupiter</span><span class="p">,</span> <span class="n">Saturn</span><span class="p">,</span> <span class="n">Uranus</span><span class="p">,</span> <span class="n">Neptune</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面重新定义了Planet枚举，它的原始值是整数，第一个从1开始，后面的依次递增。</p>

<p>使用 toRaw 来访问枚举的原始值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">earthIndex</span> <span class="o">=</span> <span class="n">Planet</span><span class="p">.</span><span class="n">Earth</span><span class="p">.</span><span class="n">toRaw</span><span class="p">()</span> <span class="c1">//earthIndex is 3 and is an Int.</span>
</span></code></pre></td></tr></table></div></figure>


<p>用 fromRaw 来尝试把一个值作为原始值转换到枚举值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">possiblePlanet</span> <span class="o">=</span> <span class="n">Planet</span><span class="p">.</span><span class="n">fromRaw</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1">//possiblePlanet的类型是 Planet?。</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为不是所有的整数都能转换到这个枚举值，所以 fromRaw返回的是一个optional。如果你给出的值无法转换到枚举，那么 fromRaw返回的就是nil。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Guide: Closures]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/10/06/language-guide-closures/"/>
    <updated>2014-10-06T14:41:52+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/10/06/language-guide-closures</id>
    <content type="html"><![CDATA[<p>闭包是一段独立的功能，可以在代码之间传递和使用。Swift里的闭包和C，ObjC里的block，以及其他语言里的lambda表达式是相似的。</p>

<p>闭包可以捕获和存储定义在定义闭包的上下文里的任何变量和常量的引用。这被叫做遮盖(closing over)这些常量和变量，正说明了闭包的概念。Swift会帮你处理所有这些捕获时的内存管理。</p>

<p>在上一章函数里，全局和嵌套函数，其实是闭包的特殊情况。闭包有三种形式：</p>

<ul>
<li>全局函数是闭包，它有名字，但是不会捕获任何值。</li>
<li>嵌套函数是闭包，它有名字，并且会捕获包含函数里值。</li>
<li>闭包表达式是无名闭包，有简单的语法，从包裹他们的上下文里捕获值。</li>
</ul>


<p>Swift的闭包表达式有着清晰，简洁的风格，并被优化过，鼓励在一般情况下写出简洁，不杂乱的语法。这些优化包括：</p>

<ul>
<li>从上下文推断参数和返回值类型。</li>
<li>从单个表达式的闭包自动返回值。</li>
<li>参数名缩写。</li>
<li>尾部闭包语法。</li>
</ul>


<h5>闭包表达式</h5>

<p>嵌套函数，是在大函数里定义有名字的，独立的代码块的很方便的方法。然后，有时候我们需要写出更简短的，不需要全部定义和名字的类似函数的结构，特别是你在把函数当做参数和返回值的时候。</p>

<p>闭包表达式是一种通过简洁，集中的语法来写内连(inline)闭包的方式。闭包表达式经过优化在不损失清晰性的前提写出简短的代码。</p>

<h6>sorted函数</h6>

<p>Swift标准库里的sorted函数用来排序一个已知类型的数组，基于你传递给它的排序闭包。一旦配需结束，它返回一个排好序的数组。原来的数组并没有被sorted函数改变。</p>

<p>下面是我们要排序的数组：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Chris&quot;</span><span class="p">,</span><span class="s">&quot;Alex&quot;</span><span class="p">,</span><span class="s">&quot;Ewa&quot;</span><span class="p">,</span><span class="s">&quot;Barry&quot;</span><span class="p">,</span><span class="s">&quot;Daniella&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>sorted的函数接受2个参数，一个是要排序的数组，另一个是一个闭包，接受两个参数，他们的类型需要和数组元素的类型一致，返回一个Bool值，来表示如果第一个参数应该排在第二个参数之前，那么就是true，反之则是false。</p>

<p>这个例子我们排的是String，所以闭包的类型应该是(String,String) -> Bool。</p>

<p>一种方式，我们写出排序的函数，然后把它传递给sorted函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">backwards</span><span class="p">(</span><span class="nl">s1</span><span class="p">:</span><span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span><span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">,</span><span class="n">backwards</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果s1大于s2，返回true，意思是如果s1大于s2，那么s1应该排在s2的前面。对于字符串里的字符来说，大于就是在字母表里排在后面。也就是说&#8217;B&#8217;大于&#8217;A&#8217;。这样就给出了字母表反序的排列。</p>

<p>然而，这是一个相对比较长的写法，关键部分其实只有 a > b，我们应该用闭包表达式来写。</p>

<h6>闭包表达式</h6>

<p>闭包表达式的语法如下：</p>

<pre><code>{ (parameters) -&gt; (return type) in 
    statements
}
</code></pre>

<p>闭包表达式的语法，可以使用常量参数，变量参数和inout参数。不能有默认值。不定长参数可以使用，但是必须在最后一个。元组可以作为参数和返回值使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，这里的参数和返回值和之前通过定义函数来做的时候是一样的。然而，在闭包表达式里，参数和返回值是包裹在大括号里的，而不是在外面。</p>

<p>闭包表达式body的开始由 in 来标记。这个关键字说明了闭包的参数和返回值声明的结束，闭包的body的开始。</p>

<p>因为这个闭包的body很短，我们可以把它写在一行里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="k">in</span> <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h6>从上下文推断类型</h6>

<p>因为这个排序闭包作为参数传递给一个函数，Swift可以通过sorted的第二个参数的类型来推断出这个闭包的类型。sorted函数的这个参数需要一个(String,String)->Bool类型的闭包，这意味着我们其实不用在闭包表达式里写出这个类型，因为所有的类型都可以推断出来，那->和参数名字周围的括弧可以省略掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">,{</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span> <span class="k">in</span> <span class="k">return</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们把一个内连的闭包表达式传递给一个函数时，我们总是能够推断出他的参数和返回值类型，也就是说，这种情况下，你永远都不需要把闭包的完整格式写出来。</p>

<p>尽管如此，你仍热可以把类型明确的写出来，事实上，如果这样可以增加代码的可读性，就应该写出来。在上面sorted的例子里，闭包的目的就是排序，而且认为它就是在处理String类型也不会有问题，因为它是用来帮助排序一个字符串数组的。</p>

<h6>从单个表达式的闭包自动返回值</h6>

<p>单个表达式的闭包可以自动返回唯一的表达式的值，所以不需要写return。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">,{</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span> <span class="k">in</span> <span class="n">s1</span> <span class="o">&gt;</span> <span class="n">s2</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h6>参数名缩写</h6>

<p>Swift自动为内连闭包提供参数的缩写，他们是$0,$1,$2 &hellip;。</p>

<p>如果我们是用缩写的参数名，那么我们就不用写出参数列表，而这些缩写的参数的类型也会被推断出来。in 也可以被省略掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h6>操作符函数</h6>

<p>其实，上面的例子我们可以写的更短。Swift的String类型定义了 > 作为一个函数，接受2个String，返回一个Bool。这个正好满足我们sorted函数的要求。因此，我们可以直接传入 >，Swift会推断出你想要它做的事情。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">,</span> <span class="o">&gt;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>尾部闭包</h5>

<p>如果你把一个闭包做为函数参数的最后一个传递给一个函数，你可以把这个闭包用尾部闭包的语法来写。尾部闭包的写法是把这个闭包写在括弧的后面，而不是包裹在括弧里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">someFunctionThatTakesAClosure</span><span class="p">(</span><span class="nl">closure</span><span class="p">:</span> <span class="p">()</span><span class="o">-&gt;</span><span class="p">()</span> <span class="p">){</span>
</span><span class='line'><span class="c1">// body here</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">someFunctionThatTakesAClosure</span><span class="p">({</span>
</span><span class='line'><span class="c1">// body here</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="n">someFunctionThatTakesAClosure</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// body here</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
如果比个闭包表达式是一个函数的唯一一个参数，你通过尾部闭包来提供这个参数。那么你可以不写（）。
</code></pre>

<p>上面的sorted的例子也可以用尾部闭包来写。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">reversed</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">names</span><span class="p">)</span> <span class="p">{</span> <span class="err">$</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="err">$</span><span class="mi">1</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>尾部闭包在处理闭包函数体很大的时候非常有用。例如，Swift的Array有个map函数，接受一个闭包作为唯一的参数。这个闭包会在每个数组元素上调用，然会一个新的值，然后map函数会把所有这些作为一个新的数组返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">digitNames</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="mi">0</span><span class="o">:</span> <span class="s">&quot;Zero&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">:</span> <span class="s">&quot;One&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">:</span> <span class="s">&quot;Two&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">:</span> <span class="s">&quot;Three&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="o">:</span> <span class="s">&quot;Four&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="mi">5</span><span class="o">:</span> <span class="s">&quot;Five&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="o">:</span> <span class="s">&quot;Six&quot;</span><span class="p">,</span> <span class="mi">7</span><span class="o">:</span> <span class="s">&quot;Seven&quot;</span><span class="p">,</span> <span class="mi">8</span><span class="o">:</span> <span class="s">&quot;Eight&quot;</span><span class="p">,</span> <span class="mi">9</span><span class="o">:</span> <span class="s">&quot;Nine&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">16</span><span class="p">,</span><span class="mi">58</span><span class="p">,</span><span class="mi">510</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">map</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="n">var</span> <span class="n">number</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">output</span> <span class="o">=</span> <span class="n">digitNames</span><span class="p">[</span><span class="n">number</span> <span class="o">%</span> <span class="mi">10</span><span class="p">]</span><span class="o">!</span> <span class="o">+</span> <span class="n">output</span> <span class="c1">// 注意 !</span>
</span><span class='line'>      <span class="n">number</span> <span class="o">/=</span> <span class="mi">10</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">output</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>map方法调用上面的闭包。你不需要给出number的类型。</p>

<p>这个例子，number参数被定义成了var，所以你可以改变它的值。并且明确给出了闭包的返回值类型是一个String。</p>

<pre><code>注意
在通过角标访问digitNames的时候，后面的那个！，因为角标访问字典回复的时个optional，我们应该判断是否为nil。不过这个例子里，不可能出现 nil，所以没有判断直接解包。
</code></pre>

<p>这个例子很好的展示了使用尾部闭包来把闭包的功能紧凑的挨着调用函数而不用把闭包放在函数的括弧里。</p>

<h5>捕获值</h5>

<p>闭包从定义它自己的上下文里捕获常量和变量的值。然后，闭包就可以在闭包体内引用和修改这些值，即使最开始定义这些值的作用域已经不存在了。</p>

<p>最简单的闭包就是嵌套函数。一个嵌套函数可以捕获包裹函数的参数，以及所有的定义在包裹函数内的常量和变量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">makeIncrementor</span> <span class="p">(</span><span class="n">forIncrement</span> <span class="nl">amount</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">runningTotal</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">incrementor</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">runningTotal</span> <span class="o">+=</span> <span class="n">amount</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">runningTotal</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">incrementor</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面例子，makeIncrementor的返回值是一个类型为() -> Int的函数。</p>

<p>makeIncrementor定义了一个runningTotal，来存储当前makeIncrementor的runningTotal，初始值是0。</p>

<p>makeIncrementor的唯一参数amount是一个Int值，每次调用incrementor，都会把这个amount加到runningTotal上面。</p>

<p>makeIncrementor还定义了一个嵌套函数incrementor，它来做真正的增加操作。</p>

<p>如果我们单独来看incrementor函数，它是很奇怪的。</p>

<p>他没有定义任何参数，但是却引用了runningTotal和amount。它是把这个值捕获了。</p>

<p>incrementor并没有修改amount，所以他只是拷贝的一份。然而，对于runningTotal，incrementor每次调用都会修改它的值。所以incrementor事实上是捕获了一份引用，而不是简单的拷贝值。捕获引用可以确保runningTotal在makeIncrementor调用结束后不消失，这样下次调用incrementor的时候就会存在。</p>

<pre><code>注意
Swift会决定什么值需要拷贝，什么需要捕获引用。你不需要做任何事。Swift也负责所有的内存管理。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">incrementByTen</span> <span class="o">=</span> <span class="n">makeIncrementor</span><span class="p">(</span><span class="nl">forIncrement</span><span class="p">:</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="n">incrementByTen</span><span class="p">()</span> <span class="c1">// 10</span>
</span><span class='line'><span class="n">incrementByTen</span><span class="p">()</span> <span class="c1">// 20</span>
</span><span class='line'><span class="n">incrementByTen</span><span class="p">()</span> <span class="c1">// 30</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你定义一个新的incrementor，他会存储它自己的，新的一个runningTotal。调用之前定义的incrementByTen并不会干扰这个新的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">incrementBySeven</span> <span class="o">=</span> <span class="n">makeIncrementor</span><span class="p">(</span><span class="nl">forIncrement</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="n">incrementBySeven</span><span class="p">()</span> <span class="c1">// 7</span>
</span><span class='line'><span class="n">incrementByTen</span><span class="p">()</span>  <span class="c1">// 40</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
如果你把闭包附值给了一个类实例的属性，并且这个闭包捕获了这个类实例或它的成员，这将是一个循环引用。你需要使用捕获列表来处理。
</code></pre>

<h5>闭包是引用类型</h5>

<p>上面的例子里，incrementBySeven和incrementByTen是常量。但是这些常量引用的闭包依旧可以修改他们捕获的runningTotal的值。这是因为函数和闭包是引用类型。</p>

<p>无论何时你把一个函数或闭包附值给一个常量或变量，你都是把它的引用附值给了常量或变量。上面的例子，是说incrementByTen的引用是个常量，(注：就是它不能在引用其他闭包）而不是闭包本身是常量。</p>

<p>这也意味着，同一个闭包可以被多个变量或常量引用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Guide: Functions]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/10/05/language-guide-functions/"/>
    <updated>2014-10-05T14:40:40+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/10/05/language-guide-functions</id>
    <content type="html"><![CDATA[<p>函数是用来完成某一任务的独立的一段代码。函数名标示了它用来做什么，也用来调用这个函数。</p>

<p>Swift统一的函数语法，既可以不要参数名字来表达简单的C语言的函数，也可以给出内部和外部参数名字来表达ObjC里复杂的函数。参数可以提供默认值，也可以做为输入输出参数，在函数执行后，改变传进来的值。</p>

<p>Swift里每一个函数都一个一个类型，这个类型由参数类型和返回值类型组成。我们可以把这个类型和Swift里其他类型同等对待。这样，可以非常方便的把函数作为参数或返回值。函数也可以定义在其他函数里。</p>

<h6>定义和调用函数</h6>

<p>当你定义一个函数时，你可以可选的定义一个或多个有类型的参数作为输入，并且或者定义一个类型的值作为函数调用后的返回值。</p>

<p>每个函数都有一个函数名，描述了这个函数是做什么的。为了使用这个函数，你通过把输入参数传递给这个函数名来调用这个函数。一个函数的参数必须按照定义的顺序传递给函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">sayHello</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">let</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">&quot;Hello, &quot;</span> <span class="o">+</span> <span class="n">person</span> <span class="o">+</span> <span class="s">&quot;!&quot;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">greeting</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>func来定义一个函数，用 ->来分割参数和返回值。</p>

<h5>函数参数和返回值</h5>

<p>Swift函数的参数和返回值非常的灵活。</p>

<h6>多参数函数</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">halfOpenRangeLength</span><span class="p">(</span><span class="nl">start</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">end</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>无参数函数</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">sayHelloWorld</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;Hello,World&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>无返回值函数</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">sayGoodbye</span><span class="p">(</span><span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Goodbye, \(person)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
严格来讲，sayGoodbye还是有返回值的。函数在没有声明返回值的时候会返回一个Void类型的特殊值，也就是一个空的元组，()。
</code></pre>

<p>函数的返回值可以被忽略。</p>

<pre><code>注意
函数的返回值可以被忽略，但是函数如果声明了返回值，那么它必须返回一个值，否则编译错误。
</code></pre>

<h6>多返回值函数</h6>

<p>可以使用元组来把多个值组合起来返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">minMax</span><span class="p">(</span><span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nl">min</span><span class="p">:</span><span class="n">Int</span><span class="p">,</span><span class="nl">max</span><span class="p">:</span><span class="n">Int</span><span class="p">){</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">currentMin</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">currentMax</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="n">currentMax</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">currentMax</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">currentMin</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">currentMin</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">currentMin</span><span class="p">,</span><span class="n">currentMax</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>optional的元组返回类型</h6>

<p>如果函数返回的元组在有些时候不存在，那么可以把返回的元组声明为optional的。</p>

<pre><code>注意
一个optional的元组(Int,Int)? 和一个包含optional值的元组(Int?,Int?)是不一样的。
</code></pre>

<p>上面的minMax没有做安全检查，如果数组没空，访问array[0]是有问题的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">minMax</span><span class="p">(</span><span class="nl">array</span><span class="p">:</span> <span class="p">[</span><span class="n">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nl">min</span><span class="p">:</span><span class="n">Int</span><span class="p">,</span><span class="nl">max</span><span class="p">:</span><span class="n">Int</span><span class="p">)</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">array</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">nil</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">currentMin</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">currentMax</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">value</span> <span class="k">in</span> <span class="n">array</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="n">currentMax</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">currentMax</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">currentMin</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">currentMin</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">currentMin</span><span class="p">,</span><span class="n">currentMax</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用optional绑定来检查返回值。</p>

<h6>函数参数的名字</h6>

<p>上面所有的函数都定义了参数的名字。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">someFunction</span><span class="p">(</span><span class="nl">parameterName</span> <span class="p">:</span><span class="n">Int</span><span class="p">){</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，这些名字都只能在函数内部使用，而不能在调用函数时使用。这样的参数名字一般叫做本地参数名。</p>

<h6>外部参数名</h6>

<p>有些时候，如果能够在调用函数的时候提供参数的名字，来说明每个参数的意思是很有用的。</p>

<p>你可以在本地参数名前面加一个外部参数名，用空格隔开。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">someFunction</span><span class="p">(</span><span class="n">externalParameterName</span> <span class="nl">localParameterName</span> <span class="p">:</span><span class="n">Int</span><span class="p">){</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
如果你定义了外部参数名，那这个名字必须在调用时使用。
</code></pre>

<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">join</span><span class="p">(</span><span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">joiner</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-</span><span class="err"></span><span class="o">&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">joiner</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用时:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">join</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">,</span><span class="s">&quot;world&quot;</span><span class="p">,</span><span class="s">&quot;,&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用外部参数名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">join</span><span class="p">(</span><span class="n">string</span> <span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toString</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">withJoiner</span> <span class="nl">joiner</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-</span><span class="err"></span><span class="o">&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">joiner</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">join</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="err">“</span><span class="n">hello</span><span class="s">&quot;, toString: &quot;</span><span class="n">world</span><span class="s">&quot; withJoiner: ”,&quot;</span><span class="err">）</span>
</span></code></pre></td></tr></table></div></figure>


<h6>外部参数名简写</h6>

<p>如果你的外部参数名，和本地参数名的名字一样的话，你不需要写两遍，而是在参数名前面加 # 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">containsCharacter</span><span class="p">(</span><span class="err">#</span><span class="nl">string</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="err">#</span><span class="nl">characterToFind</span><span class="p">:</span> <span class="n">Character</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">character</span> <span class="k">in</span> <span class="n">string</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">character</span> <span class="o">==</span> <span class="n">characterToFind</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>默认参数值</h6>

<p>你可以给任意一些参数提供默认值，如果有默认值，那么在调用时，你可以不传递参数。</p>

<pre><code>注意
你应该把有默认参数值的参数放在参数列表的最后，这样确保调用时的没有默认值的参数顺序是对的。
</code></pre>

<p>例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">join</span><span class="p">(</span><span class="n">string</span> <span class="nl">s1</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">toString</span> <span class="nl">s2</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span>
</span><span class='line'>    <span class="n">withJoiner</span> <span class="nl">joiner</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">joiner</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用时，如果不给第三个参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">join</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="nl">toString</span><span class="p">:</span> <span class="s">&quot;world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果给了第三个参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">join</span><span class="p">(</span><span class="nl">string</span><span class="p">:</span> <span class="s">&quot;hello&quot;</span><span class="p">,</span> <span class="nl">toString</span><span class="p">:</span> <span class="s">&quot;world&quot;</span><span class="p">,</span> <span class="nl">withJoiner</span><span class="p">:</span> <span class="s">&quot;-&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h6>有默认值的外部参数名</h6>

<p>在大多数情况下，如果一个参数有默认值，它应该对应的有一个外部参数名。这样可以确保在调用时，实参传递给了正确的形参。</p>

<p>为了简化这个步骤，Swift为每一个有默认值的参数一个外部参数名，和内部参数名一致，就好像你写了 # 一样。</p>

<pre><code>注意
你可以通过写一个 _ 作为外部参数名来不用这个特性，但是有默认值的参数对应有外部参数名是比较好的做法。
</code></pre>

<h6>不定长的参数</h6>

<p>一个不定长的参数，接受0个或多个某一类型的参数。在参数类型后面加 &hellip; 来表示不定长参数。</p>

<p>传入到不定长参数的实参会作为一个数组存在。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">arithmeticMean</span><span class="p">(</span><span class="nl">numbers</span><span class="p">:</span> <span class="n">Double</span><span class="p">...)</span> <span class="o">-&gt;</span> <span class="n">Double</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">total</span><span class="p">:</span> <span class="n">Double</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span> <span class="o">/</span> <span class="n">Double</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
一个函数最多只能有一个不定长参数，而且必须是参数列表的最后一个。如果一个函数有默认值参数和不定长参数，先写默认值参数，再写不定长参数。
</code></pre>

<h6>常量和变量参数</h6>

<p>函数参数默认是常量，如果你在函数里改变参数的值，会造成编译错误。</p>

<p>但是，有时候能够使用一个可变的参数的拷贝会很方便。你可以声明参数为var来做到这一点。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">alignRight</span><span class="p">(</span><span class="n">var</span> <span class="nl">string</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="nl">count</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">pad</span><span class="p">:</span> <span class="n">Character</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">amountToPad</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="n">countElements</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">amountToPad</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">string</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">padString</span> <span class="o">=</span> <span class="n">String</span><span class="p">(</span><span class="n">pad</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">..</span><span class="n">amountToPad</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">string</span> <span class="o">=</span> <span class="n">padString</span> <span class="o">+</span> <span class="n">string</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
你对var的参数做的改变只在当次函数调用时有用。在函数外部不可见。var的参数也只在函数调用期间存在。
</code></pre>

<h6>输入输出函数</h6>

<p>变量参数只能在函数内起作用，如果你希望你对一个参数做的改变可以在函数调用结束后依然有效，你需要把它声明为输入输出参数。</p>

<p>在参数前面加上 inout 来标示一个输入输出参数。</p>

<p>你只能给 inout参数传递一个变量，而不能传递常量或字面量。你在实参前面加一个 &amp; 来标示这个参数是作为 inout 参数传入的。</p>

<pre><code>注意
inout 参数不能有默认值，也不能作为不定长参数。如果标记为 inout，也不能再标记let或者var。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">swapTwoInts</span><span class="p">(</span><span class="k">inout</span> <span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="k">inout</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">temporaryA</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">temporaryA</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>调用时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">someInt</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">var</span> <span class="n">anotherInt</span> <span class="o">=</span> <span class="mi">107</span>
</span><span class='line'><span class="n">swapTwoInts</span><span class="p">(</span><span class="o">&amp;</span><span class="n">someInt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">anotherInt</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;someInt is now \(someInt), and anotherInt is now \(anotherInt)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
inout参数和函数返回值不一样。
</code></pre>

<h5>函数类型</h5>

<p>每个函数都有函数类型，由参数类型和返回值类型组成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">addTwoInts</span><span class="p">(</span><span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">multiplyTwoInts</span><span class="p">(</span><span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面两个函数的类型都是 (Int,Int) -> (Int)。读作一个函数类型，接受2个Int类型的参数，返回一个Int类型的值。</p>

<p>另一个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">printHello</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的函数类型是 () -> ()，读作不接受参数，返回Void。</p>

<h6>使用函数类型</h6>

<p>使用函数类型和其他类型一模一样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="nl">mathFunc</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">=</span> <span class="n">addTwoInts</span>
</span></code></pre></td></tr></table></div></figure>


<h6>函数类型作为参数类型</h6>

<p>可以把函数类型作为参数类型，这让调用者可以传入一个函数来帮助实现我们的函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="nf">printMathResult</span><span class="p">(</span><span class="nl">mathFunction</span><span class="p">:</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">a</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="nl">b</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Result: \(mathFunction(a, b))&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">printMathResult</span><span class="p">(</span><span class="n">addTwoInts</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h6>函数类型作为返回值类型</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">stepForward</span><span class="p">(</span><span class="nl">input</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">input</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">stepBackward</span><span class="p">(</span><span class="nl">input</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">input</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">chooseStepFunction</span><span class="p">(</span><span class="nl">backwards</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">backwards</span> <span class="o">?</span> <span class="nl">stepBackward</span> <span class="p">:</span> <span class="n">stepForward</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">let</span> <span class="n">moveNearerToZero</span> <span class="o">=</span> <span class="n">chooseStepFunction</span><span class="p">(</span><span class="n">currentValue</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">//注：let而不是var</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;Counting to zero:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">// Counting to zero:</span>
</span><span class='line'><span class="k">while</span> <span class="n">currentValue</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(currentValue)... &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">currentValue</span> <span class="o">=</span> <span class="n">moveNearerToZero</span><span class="p">(</span><span class="n">currentValue</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;zero!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>嵌套函数</h5>

<p>目前见到的所有函数都是全局函数，被定义在一个全局作用域内。我们也可以在函数内定义其他函数。</p>

<p>嵌套函数默认为外部是不可见的。但是可以被包含函数调用。包含函数也可以返回内嵌函数，让外部可以在其他作用域被调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">chooseStepFunction</span><span class="p">(</span><span class="nl">backwards</span><span class="p">:</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">stepForward</span><span class="p">(</span><span class="nl">input</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">input</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">stepBackward</span><span class="p">(</span><span class="nl">input</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span> <span class="k">return</span> <span class="n">input</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">backwards</span> <span class="o">?</span> <span class="nl">stepBackward</span> <span class="p">:</span> <span class="n">stepForward</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="o">-</span><span class="mi">4</span>
</span><span class='line'><span class="n">let</span> <span class="n">moveNearerToZero</span> <span class="o">=</span> <span class="n">chooseStepFunction</span><span class="p">(</span><span class="n">currentValue</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="c1">// moveNearerToZero now refers to the nested stepForward() function</span>
</span><span class='line'><span class="k">while</span> <span class="n">currentValue</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(currentValue)... &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">currentValue</span> <span class="o">=</span> <span class="n">moveNearerToZero</span><span class="p">(</span><span class="n">currentValue</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;zero!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Guide: Control Flow]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/10/04/language-guide-control-flow/"/>
    <updated>2014-10-04T14:39:29+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/10/04/language-guide-control-flow</id>
    <content type="html"><![CDATA[<p>Swift提供了和类C语言相似的流程控制语句。包括for和while来做循环，if和switch来做分支，break和continue来做打断。</p>

<p>除了支持for，Swift还加入了for-in来简化字符串，数组，字典，区间和其他序列的遍历。</p>

<p>Swift的switch也比C的要强大许多，case不会默认的执行下一个case，避免了忘写break带来的bug。case也可以匹配其他的模式，包括字符串，区间，并且可以cast到某个特定类型。匹配的值可以绑定到临时变量，这样在case里面就可以使用，复杂的case可以通过添加where来表达。</p>

<p><em>注：这里很多的内容都是和C，ObjC一样的，所以很多地方都省略了，重点翻译了Swift里的特性和一些需要特别注意的地方。</em></p>

<h5>For循环</h5>

<p>两种：</p>

<ul>
<li>for-in</li>
<li>for</li>
</ul>


<h6>for-in</h6>

<p>使用for-in来循环遍历一个序列的元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="n">index</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.5</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(index) times 5 is \(index * 5)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的循环里，index是常量，每次遍历被赋予新值。</p>

<p>如果不需要每次遍历给出的值，可以用 _ 来接受遍历给出值。</p>

<h6>for</h6>

<p>和C一样的for循环。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="n">var</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">index</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;index is \(index)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>index只在for循环语句内可见。如果想在for语句后访问index，必须在for语句之前声明。</p>

<p>注意如果在for循环外使用index的值，那么++index和index++是不一样的。</p>

<h5>while循环</h5>

<p>两种：</p>

<ul>
<li>while</li>
<li>do-while</li>
</ul>


<h6>while</h6>

<h6>do-while</h6>

<h5>条件语句</h5>

<p>if和switch</p>

<h6>if</h6>

<h6>switch</h6>

<p>switch语句必须是穷举的，这意味着，switch的所有case的组合必须覆盖了条件值可以取值的所有范围。</p>

<p>switch语句，不会在执行完一个case之后继续执行下一个case。</p>

<p>条件值，可以用范围来区分case。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">3</span><span class="n">_000_000_000_000</span>
</span><span class='line'><span class="n">let</span> <span class="n">things</span> <span class="o">=</span> <span class="s">&quot;stars in the Milky Way&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="nl">naturalCount</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="k">switch</span> <span class="n">count</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
</span><span class='line'>  <span class="n">naturalCount</span> <span class="o">=</span> <span class="s">&quot;no&quot;</span>
</span><span class='line'><span class="k">case</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.3</span><span class="o">:</span>
</span><span class='line'>  <span class="n">naturalCount</span> <span class="o">=</span> <span class="s">&quot;a few&quot;</span>
</span><span class='line'><span class="k">case</span> <span class="mf">4.</span><span class="p">.</span><span class="mf">.9</span><span class="o">:</span>
</span><span class='line'>  <span class="n">naturalCount</span> <span class="o">=</span> <span class="s">&quot;several&quot;</span>
</span><span class='line'><span class="k">case</span> <span class="mf">10.</span><span class="p">.</span><span class="mf">.99</span><span class="o">:</span>
</span><span class='line'>  <span class="n">naturalCount</span> <span class="o">=</span> <span class="s">&quot;tens of&quot;</span>
</span><span class='line'><span class="k">case</span> <span class="mf">100.</span><span class="p">.</span><span class="mf">.999</span><span class="o">:</span>
</span><span class='line'>  <span class="n">naturalCount</span> <span class="o">=</span> <span class="s">&quot;hundreds of &quot;</span>
</span><span class='line'><span class="k">case</span> <span class="mf">1000.</span><span class="p">.</span><span class="mf">.999</span><span class="nl">_999</span><span class="p">:</span>
</span><span class='line'>  <span class="n">naturalCount</span> <span class="o">=</span> <span class="s">&quot;thousands of&quot;</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>  <span class="n">naturalCount</span> <span class="o">=</span> <span class="s">&quot;millions of &quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>条件值，也可是元组。元组的每个元素都可以匹配，使用 _ 来匹配任意值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">somePoint</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">switch</span> <span class="n">somePoint</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;origin&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="err">\</span><span class="n">_</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;x axis&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">_</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;y axis&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="o">-</span><span class="mf">2.</span><span class="p">.</span><span class="mf">.2</span><span class="p">,</span><span class="o">-</span><span class="mf">2.</span><span class="p">.</span><span class="mf">.2</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot; in a square&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nl">defualt</span><span class="p">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;out of square&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子里，和C不一样，Swift允许多个case包含相同的值，（0，0）满足4个分支。然而，如果有多个匹配，那么只执行第一个匹配。</p>

<p>switch的case可以把匹配的值绑定到临时变量，以便在case的代码中使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">point</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="k">switch</span> <span class="n">point</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="n">let</span> <span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;on x axis with x = \(x)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">let</span> <span class="n">y</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;on y axis with y = \(y)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;x = \(x), y = \(y)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的x，y是常量，如果声明为var，也只能在case语句内改变。</p>

<p>switch的case可以使用where来表达复杂的case条件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">point</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">switch</span> <span class="n">point</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="err"></span><span class="p">)</span> <span class="n">where</span> <span class="n">x</span> <span class="o">==</span> <span class="nl">y</span><span class="p">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;point on the line x == y&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="n">where</span> <span class="n">x</span> <span class="o">==</span> <span class="o">-</span><span class="nl">y</span><span class="p">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;point on the line x == -y&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;arbitrary point&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>控制转换语句</h5>

<ul>
<li>continue</li>
<li>break</li>
<li>fallthrough</li>
<li>return</li>
</ul>


<h6>continue</h6>

<h6>break</h6>

<h6>fallthrough</h6>

<p>Swift里，switch的case默认不会fallthrough，如果需要，那么用fallthrough。</p>

<h6>标签语句</h6>

<p>嵌套switch或者循环在其他的switch和循环里，能够写出非常复杂的控制语句。然后循环和switch都使用break来终止执行。那么，如果能够明确的说明终止到哪一个循环或switch语句是很有用的。对于continue也有这样的使用场景。</p>

<p>为了达到这个目标，我们可以在循环或switch语句上加上标签，然后在break和continue的时候写上标签，来告诉程序跳转到哪里继续执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Guide: Collection Types]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/10/03/language-guide-collection-types/"/>
    <updated>2014-10-03T14:37:37+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/10/03/language-guide-collection-types</id>
    <content type="html"><![CDATA[<p>Swift提供了两种容器类型，数组和字典。数组相同类型对象的有序列表。字典存储相同类型的无序的值的组合，每个值都可以通过一个标示符（键）来查询。</p>

<p>Swift里数组和字典对他们所包含的值的类型是知道的。这意味着，你不能插入不同类型的值。这也意味着，当你从他们中取值时，取到的值的类型也是确定的。</p>

<pre><code>注意
数组和字典底层是通过泛型容器来实现的。
</code></pre>

<h5>容器的可变性</h5>

<p>如果你把一个容器附值给一个变量，它就是可变的，意味着你可以添加，删除，替换它里面的元素。相反，如果你把一个容器附值给一个常量，它就是不可变的，它的大小和内容就不能被改变。</p>

<pre><code>注意
如果可能，应该尽可能的声明不可变容器。
</code></pre>

<h5>数组</h5>

<p>数组有序的存储相同类型的值。相同的值可以出现多次。</p>

<p>Swift数组可以存储的值的类型是有限定的，不像ObjC的NSArray和NSMutableArray一样，他们不知道自己里面存的是什么类型的值。Swift数组对于它存储的值总是明确的，要么是明确写出类型，要么通过类型推断得到。这个类型不一定是类，可以是Int这样的类型。</p>

<h6>数组类型简写语法</h6>

<p>数组的类型，写全了是Array<SomeType>，也可以简写为[SomeType]。两者是一样的。</p>

<h6>数组字面量</h6>

<p>我们可以通过数组字面量来创建一个数组。数字字面量就是一系列值，用逗号隔开，包含在一组方括号里。</p>

<p>[value1, value2,value3]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">shoppingList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;apple&quot;</span><span class="p">,</span><span class="s">&quot;orange&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h6>访问和修改数组</h6>

<p>通过数组的属性，方法，和角标可以访问数组的元素。</p>

<p>计算数组有多少元素，用count方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;the shopping list has \(shoppingList.count) items&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用isEmpty属性来判断count是否为0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">shoppingList</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;shopping list is empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过append方法来给数组添加元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">shoppingList</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;banana&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者，使用 += 来添加一个其他的数组的所有元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">shoppingList</span> <span class="o">+=</span> <span class="p">[</span><span class="s">&quot;book&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">shoppingList</span> <span class="o">+=</span> <span class="p">[</span><span class="s">&quot;pen&quot;</span><span class="p">,</span> <span class="s">&quot;butter&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用角标来获取数组的某个元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">firstItem</span> <span class="o">=</span> <span class="n">shoppingList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意数组从0开始。</p>

<p>你也可以使用角标来修改数组的元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">shoppingList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;eggs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以使用角标来批量修改数组某个范围的所有元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">shoppList</span><span class="p">[</span><span class="mf">2.</span><span class="p">.</span><span class="mf">.4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;display&quot;</span><span class="p">,</span><span class="s">&quot;computer&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
不能通过角标来给数组添加元素，如果你的角标超出了数组元素的个数，就是运行时错误。
</code></pre>

<p>使用insert（atIndex：）方法来在特定的位置插入元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">shoppingList</span><span class="p">.</span><span class="n">insert</span><span class="s">&quot;flower&quot;</span><span class="p">,</span> <span class="nl">atIndex</span><span class="p">:</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样的，使用removeAtIndex来删除某个特定位置的元素</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">flower</span> <span class="o">=</span> <span class="n">shoppingList</span><span class="p">.</span><span class="n">removeAtIndex</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>删除造成的任何空缺都会被处理掉，所以数组的第一个元素已经改变。</p>

<p>你可以使用removeLast来删除最后一个元素。</p>

<h6>遍历一个数组</h6>

<p>使用for-in来遍历整个数组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">shoppList</span><span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你需要每个元素的索引，那么使用全局幻术enumerate来取代数组，enumerate函数会返回一个索引和元素的二元组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span><span class="n">item</span><span class="p">)</span> <span class="k">in</span> <span class="n">enumerate</span><span class="p">(</span><span class="n">shoppingList</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Item\(index+1): \(item)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>创建和初始化数组</h6>

<p>用下面的语法来创建一个特定类型的空数组</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">someInts</span> <span class="o">=</span> <span class="p">[</span><span class="n">Int</span><span class="p">]()</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，如果上下文已经给出了类型信息，那么可以直接用[]来创建数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">someInts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="n">someInts</span> <span class="o">=</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift的数组还提供了可以创建确定长度，并给出元素初始值的初始化函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">threeDoubles</span> <span class="o">=</span> <span class="p">[</span><span class="n">Double</span><span class="p">](</span><span class="nl">count</span><span class="p">:</span><span class="mi">3</span><span class="p">,</span><span class="nl">repeatedValue</span><span class="p">:</span><span class="mf">0.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用 + 可以把两个数组合并为一个数组。</p>

<h5>字典</h5>

<p>字典是用来存储相同类型的值的容器，每个值都有一个唯一的key，作为这个值的标示。和数组不同，字典的元素是无序的。使用唯一的key来获取对应的值。</p>

<pre><code>注意
Swift的字典对于类型也是明确的，和ObjC的NSDictionary和NSMutableDictionay不同。
</code></pre>

<h6>字典类型简写</h6>

<p>字典的类型，写全了是Dictionary&lt;KeyType,ValueType>。可以简写为[KeyType : ValueType]，两者是一样的。</p>

<h6>字典字面量</h6>

<p>可以通过字典字面量来创建字典，和数组很相似。</p>

<p>[key1 : value1, key2 : value2, key3 : value3]</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">airports</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;TYO&quot;</span> <span class="o">:</span> <span class="s">&quot;Tokyo&quot;</span><span class="p">,</span> <span class="s">&quot;DUB&quot;</span> <span class="o">:</span> <span class="s">&quot;Dublin&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h6>访问和修改字典</h6>

<p>通过方法，属性，或角标来访问和修改字典。字典内元素的个数用count计算。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;The airports dictionary has \(airports.count) items&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用isEmpty来判断count是否为0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">airports</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过角标来添加元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">airports</span><span class="p">[</span><span class="s">&quot;LHR&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;London&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以通过角标来改变元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">airports</span><span class="p">[</span><span class="s">&quot;LHR&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;London Heathrow&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以使用updateValue（forKey：）来添加或更新值。和角标一样，如果没有旧的值，就添加，如果有，则更新。但是，和角标不一样，updateValue会返回旧的值，你可以通过这个判断是做了更新还是添加。</p>

<p>updateValue返回一个optional，所以你需要检查是否为nil。</p>

<p>你也可以用角标来获取某个key对应的值。但是因为这个值可能不存在，所以返回的是一个optional的值。使用的时候需要判断是否为nil。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">name</span> <span class="o">=</span> <span class="n">airports</span><span class="p">[</span><span class="s">&quot;DUB&quot;</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;the name is \(name)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;no airport&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以使用角标来删除某个key对应的元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">airports</span><span class="p">[</span><span class="s">&quot;APL&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;Apple&quot;</span>
</span><span class='line'><span class="n">airports</span><span class="p">[</span><span class="s">&quot;APL&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，也可以使用removeValueForKey来删除键值对。如果有值，返回删除的值，如果没有，返回nil。</p>

<h6>遍历字典</h6>

<p>使用for-in来遍历字典，每次返回的时一个（key，value）的二元组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">in</span> <span class="n">airports</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(code) : \(name)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以通过字典的keys或values属性来单独获得keys和values。</p>

<p>如果你需要把keys和values传递给一个需要数组的api，那么你需要用keys和values来创建一个数组。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">codes</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">](</span><span class="n">airports</span><span class="p">.</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="n">String</span><span class="p">](</span><span class="n">airports</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
因为字典是无序的，那么获取keys，values或者key-value对的时候的顺序是不确定的。
</code></pre>

<h6>创建一个空的字典。</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">namesOfInts</span> <span class="o">=</span> <span class="p">[</span><span class="nl">String</span><span class="p">:</span><span class="n">Int</span><span class="p">]()</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上下文已知类型的时候可以使用 [ : ]来创建空的字典。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">namesOfInts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;ten&quot;</span><span class="o">:</span><span class="mi">10</span><span class="p">]</span>
</span><span class='line'><span class="n">namesOfInts</span> <span class="o">=</span> <span class="p">[</span><span class="o">:</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h6>字典Key类型的哈希值</h6>

<p>一个类型要想作为字典的key，必须是可以哈希的。一个哈希值就是对于所有对象的一个值，用来判断两个值是否相等。</p>

<p>Swift的所有基础类型，String，Int，Double，Bool都默认有哈希值。没有关联值的枚举成员值默认也有哈希值。</p>

<pre><code>注意
你可以通过实现Hashable协议来让你自定义的值可以作为字典的key来使用。实现这个协议，必须定义一个Int类型的hashValue属性，还必须实现==操作符。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Guide: Strings and Characters]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/10/02/language-guide-strings-and-characters/"/>
    <updated>2014-10-02T14:36:24+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/10/02/language-guide-strings-and-characters</id>
    <content type="html"><![CDATA[<p>字符串是字符的有序集合，例如，&#8221;hello&#8221;或者&#8221;albatross&#8221;。Swift里字符串表示为Swift类型，它也表示一系列Character类型。</p>

<p>Swift的String和Character提供了一套高效的，支持Unicode的处理文本的方法。字符串创建和操作的语法的是简单的，可读性很好，而且和C有着一样的字面语法。连接2个字符串用+把他们加起来就可以了。字符串的可变版本和Swift里其他值一样，由let和var确定。</p>

<p>虽然语法很简单，但是Swift的string类型是一种高效的，现代的字符串实现。每一个字符串都是由编码无关的Unicode字符组合起来的，提供了许多种编码后字符串的访问。</p>

<p>你也可以通过字符串插入，来把字符串，常量，变量插入到更长的字符串里，这样，在创建字符串，打印和存储的时候都非常方便。</p>

<pre><code>注意
Swift的String类型和Foundation的NSString类型是无缝桥接的。如果你在使用Foundation的API，那么所有NSSting的API也可以操作String类型，你可以把一个String类型传递给任何需要NSString类型参数的函数。
</code></pre>

<h5>字符串字面量</h5>

<p>你可以把预先定义好的字符串作为字符串字面量加入到你的代码中，字符串字面量是一个固定长度的字符的组合，然后包裹在“”中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">someString</span> <span class="o">=</span> <span class="s">&quot;some string literal&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，someString会是String类型，因为他被附值了一个字符串字面量。</p>

<h5>初始化一个空字符串</h5>

<p>如果需要创建一个空的字符串，可以用字符串字面量或者用字符串实例的初始化方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">emptyString</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">anotherEmptyString</span> <span class="o">=</span> <span class="n">String</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用isEmpty来检查一个字符串是否为空字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">emptyString</span><span class="p">.</span><span class="n">isEmpty</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Empty&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>字符串可变性</h5>

<p>你通过声明一个字符串为变量或常量来说明字符串是否可变。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">variableString</span> <span class="o">=</span> <span class="s">&quot;Horse&quot;</span>
</span><span class='line'><span class="n">variableString</span> <span class="o">+=</span> <span class="s">&quot;and carriage&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">let</span> <span class="n">constantString</span> <span class="o">=</span> <span class="s">&quot;Highlander&quot;</span>
</span><span class='line'><span class="n">constantString</span>  <span class="o">+=</span> <span class="s">&quot;and carriage&quot;</span> <span class="c1">//compile error</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
这种方式和ObjC的方式不一样。
</code></pre>

<h5>字符串是值类型</h5>

<p>Swift的字符串是值类型的。如果你创建一个新的字符串，这个字符串值在传递给函数或方法时，或者附值给常量或变量的时候会被拷贝。在每一种情况下，已有字符串都被拷贝一份，新拷贝的值会被传递或是附值，而不是原有的字符串。</p>

<pre><code>注意
这种行为和Cocoa里的NSString是不一样的。在Cocoa里，你附值或传递NSString时，如果你不是明确说明，那传递和附值的都是一个引用。
</code></pre>

<p>Swift的这种默认拷贝的字符串行为确保了你在函数里使用的字符串是一个新的副本，你可以确认你传到函数里的字符串不会改变。</p>

<p>在底层，Swift做了优化，只有在真正需要拷贝的时候，拷贝才会发生，这意味着你的程序的性能并不会因为字符串是指类型而受到影响。</p>

<h5>使用Character</h5>

<p>Swift的String类型表示了一系列有序的Character。你可以通过一个for-in循环访问String里的Character。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="n">character</span> <span class="k">in</span> <span class="s">&quot;zxh&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，你也可以把一个单个字符的字符串常量附值给一个Character类型的常量和变量，你需要提供类型信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="nl">yenSin</span><span class="p">:</span> <span class="n">Character</span> <span class="o">=</span> <span class="s">&quot;$&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>连接字符串和字符</h5>

<p>字符串可以用+来连接起来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">&quot;there&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">welcome</span> <span class="o">=</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以使用+= 来连接字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">instruction</span> <span class="o">=</span> <span class="s">&quot;look over&quot;</span>
</span><span class='line'><span class="n">instruction</span> <span class="o">+=</span> <span class="n">str2</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用String的append方法来把一个Character加在字符串后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">exclamationMark</span><span class="p">:</span> <span class="n">Character</span> <span class="o">=</span> <span class="s">&quot;!&quot;</span>
</span><span class='line'><span class="n">welcome</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">exclamationMark</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
你不能把String和Character追加到Character，因为Character只包含一个字符。
</code></pre>

<h5>字符串插入</h5>

<p>字符串插入是一种可以把变量，常量，字面量，表达式插入到字符串字面量里来形成一个新的字符串的方式。每一个你插入的内容都由括弧包含，再加上一个 \ 在前面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">mutiplier</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">let</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;\(mutiplier) times 2.5 is \(mutiplier * 2.5)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子里，当字符串插入处理message时，mutiplier的真实值会带入计算出真正的字符串。</p>

<pre><code>注意
在字符串插入里写的表达式不能包含未被转意的 " 和 \ ，也不能包含换行和回车
</code></pre>

<h5>Unicode</h5>

<p>Unicode是国际上用来编码，表示和处理常用书写系统里文本的标准。你可以表示几乎所有语言的所有字符，并可以读取或者写入文件或网页。Swift的String和Character都是兼容Unicode的。</p>

<h6>Unicode标量</h6>

<p>在底层，Swift的String是从Unicode标量创建而来。一个Unicode标量是唯一的21位的数字，标示了一个字符或者修改器，例如U+0061表示&#8221;a&#8221;，U+1F425表示&#8221; &ldquo;。</p>

<pre><code>注意
一个Unicode标量是从U+0000到U+D7FF和从U+E000到U+10FFFF的所有Unicode code point。Unicode标量不包含Unicode surrogate pair，也就是从U+D800到U+DFFF。
</code></pre>

<p>注意并不是所有的21位的Unicode标量都表示一个字符，有一些被保留以备后用。被附值给字符的标量一般都有名字，例如拉丁小写字母a。</p>

<h6>字符串字面量里的特殊Unicode</h6>

<p>String字面量可以包含下面的特殊Unicode：
*   转意字符 \0, \, \t, \n, \r, \&ldquo; \&lsquo;
*   任何的Unicode标量，写作\u{n}，n表示从1到8个十六进制字符。</p>

<p>下面的例子展示了String里加入特殊字符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">wisewords</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s"> Imagination is more important than knowledge</span><span class="se">\&quot;</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">dollarSign</span> <span class="o">=</span> <span class="s">&quot;\u{24}&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">balckHeart</span> <span class="o">=</span> <span class="s">&quot;\u{2665}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h6>扩展的书写位组</h6>

<p>Swift里每一个Character都表示一个书写位。一个书写位是一个或一系列Unicode标量组合起来表示一个人类可读的字符。</p>

<p>例如，字母 e可以表示为U+00E9，也可以表示为U+0065和U+0301的组合。</p>

<p>扩展的书写位组可以表示许多复杂的字符为单一的Character值。</p>

<p>。。。</p>

<h5>计算字符个数</h5>

<p>要得到一个字符串的里Character个数，使用countElements函数。</p>

<p>注意因为Swift里Character是扩展的书写位，所以你修改字符串不一定就会改变Character的长度。例如，你开始写了cafe，然后加上了语气符号，但是Character的长度并没有改变。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">word</span> <span class="o">=</span> <span class="s">&quot;cafe&quot;</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;the number of character is \(countElements(word))&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">word</span> <span class="o">+=</span> <span class="err">\</span><span class="n">u</span><span class="p">{</span><span class="mi">301</span><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;the number of character is \(countElements(word))&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
扩展书写位组可以包含一个或多个Unicode标量，这意味着不同的字符，同一个字符的不同表示方式，可能需要占用的内存。因此，Character在Swift里并不是每个都占用大小一样的内存。因此字符的个数也不用通过遍历字符串来获得。如果你在处理很长的字符串，注意countElements需要遍历整个字符串来得到结果。
另外countElements的结果和NSString的length不总是一样的。因为NSString是基于16位编码的。为了表示这个，NSString的length对应着String的utf16Count。
</code></pre>

<h5>比较字符串</h5>

<p>Swift提供了三种比较字符串的方式，字符相同，前缀相同，后缀相同。</p>

<h6>字符相同</h6>

<p>字符相同，通过 == 和 !=来做比较。</p>

<p>两个字符串或字符，如果他们的扩展书写位标准的相同，就认为相同。扩展书写位标准的相同是说他们具有相同的语言意思和外形，即使他们底层是不一样的Uincode标量。</p>

<p>例如，U+00E9和U+0065U+0301是相等的。</p>

<p>相反，U+0041和U+0410是不相等的。</p>

<pre><code>注意
Swift里字符串和字符的比较不依赖于地理位置。
</code></pre>

<h6>前缀和后缀相等</h6>

<p>查看一个字符串时候含有特定的前缀或后缀，使用hasPrefix和hasSuffix方法。</p>

<pre><code>注意
hasPrefix和hasSuffix是一个字符一个字符的比较扩展书写位标准相等性。
</code></pre>

<h6>字符串的Unicode表示</h6>

<p>当Unicode字符串写入文件时，这些Unicode标量需要编码。例如uft8，utf16，utf32.</p>

<p>Swift提供了几种访问字符串Unicode表示的方法，可以使用for-in来按照Character的方式访问。另外字符串还有三种表现方式</p>

<ul>
<li>utf8，</li>
<li>uft16,</li>
<li>unicodeScalars</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Guide: Basic Operators]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/10/01/language-guide-basic-operators/"/>
    <updated>2014-10-01T14:34:09+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/10/01/language-guide-basic-operators</id>
    <content type="html"><![CDATA[<p>操作符是用来检查，改变或者组合值的一个特殊符号或词组。例如，加号用来做加法。还有更复杂的例如逻辑与和自增运算符。</p>

<p>Swift支持绝大多数C的操作符，并改进他们的能力来消除一些常犯的错误。赋值操作符＝不再返回值，这样就避免要用==而不小心写成=的错误。算术操作符检查值的范围，不允许值超出范围，这样可以避免运算结果太大或太小。你也可以通过使用溢出操作符来引入溢出行为。</p>

<p>和C不一样，Swift允许你对浮点数做取余操作。Swift也提供了2个区间操作符,a..&lt;b和a&hellip;b。</p>

<p>这里将描述基础操作符，高级操作符将在高级操作符那里讲解。</p>

<h5>术语</h5>

<p>操作符可以是一元的， 二元的或三元的：
    *   一元操作符处理单个值，一元操作符都紧挨着操作数。
    *   二元操作符处理两个值，在他们中间。
    *   三元操作符处理三个值，和C一样，Swift只有一个三元操作符，(a ? b : c)。</p>

<p>操作符影响的值叫操作数，在表达式 1 ＋ 2里， ＋ 是一个二元操作符，1和2是两个操作数。</p>

<h5>赋值操作符</h5>

<p>赋值操作符（a＝b）用b的值初始化或更新a的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果赋值操作符右边的是一个元组，那么它的元素可以一起被拆解出来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>和C,ObjC不一样，赋值操作符不返回任何值。下面的语句是错误的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个特性是避免在想写==的时候写成了=。</p>

<h5>算术操作符</h5>

<p>Swift支持四种算术操作符，可以用于任何数字类型：</p>

<ul>
<li>加</li>
<li>减</li>
<li>乘</li>
<li>除</li>
</ul>


<p>和C不一样，Swift默认不允许算术操作符溢出。你可以通过溢出操作符来改变这个。</p>

<p>加号也可以用于链接字符串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">&quot;hello,&quot;</span> <span class="o">+</span> <span class="s">&quot; world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>两个字符值（Character）或一个字符值，一个字符串，也可以用加号来链接起来成为一个字符串。</p>

<h6>取余操作符</h6>

<p>取余操作符（a ％ b），计算b乘以多少可以取道小于a的最大数，然后返回剩下的值，也叫余数。</p>

<pre><code>注意
取余操作符有时候也叫取模操作符，但是在Swift里，对于负数而言，％是取余而不是取模。
</code></pre>

<p>9%4是1.</p>

<p>为了计算答案，％使用下面的公式：</p>

<p>a = (b * multiplier) + remainder</p>

<p>multiplier是最大的值，然后返回remainder。</p>

<p>9 ＝ 4 ＊ 2 ＋ 1.</p>

<p>a是负数也一样：</p>

<p>－9 ％ 4 ＝ －1</p>

<p>b的符号会被直接忽略，意味着 a ％ b 和 a ％ －b永远一样。</p>

<h6>浮点数取余操作</h6>

<p>和C,ObjC不一样，取余操作在Swift可以用于浮点数：</p>

<p>8 % 2.5 = 0.5</p>

<p>8 ＝ 2.5 ＊ 3 ＋ 0.5</p>

<h6>自增和自减操作符</h6>

<p>和C一样，Swift提供了自增和自减操作符，来增加1或减少1操作数的值。这2个操作符可用于整数和浮点数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="o">++</span><span class="n">i</span>
</span></code></pre></td></tr></table></div></figure>


<p>每次调用＋＋i，i的值都会加1。－－i，则每次减一。</p>

<p>＋＋和－－可以作为前缀，也可以作为后缀，++i和i++都是可以的。同理，&ndash;i和i&ndash;也是都可以的。</p>

<p>注意，这两个操作符改变了i并且返回一个值。如果你关系这个值，那么前缀和后缀是没有区别的。但是如果你需要这个值，那么前缀和后缀是不一样的，有下面的规则：</p>

<ul>
<li>如果是前缀，先改变值，后返回值。</li>
<li>如果是后缀，先返回值，后改变值。</li>
</ul>


<p>例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">let</span> <span class="n">b</span> <span class="o">=</span> <span class="o">++</span><span class="n">a</span> <span class="c1">//a and b both is 1</span>
</span><span class='line'><span class="n">let</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">++</span> <span class="c1">//c is 1, a is 2</span>
</span></code></pre></td></tr></table></div></figure>


<p>除非你有特殊要要求，你该使用前缀，因为它最符合语义，改变值，返回值。</p>

<h6>一元减号</h6>

<p>数字的符号由一元减号来表示。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">three</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">let</span> <span class="n">minusThree</span> <span class="o">=</span> <span class="o">-</span><span class="n">three</span>
</span><span class='line'><span class="n">let</span> <span class="n">plusThree</span> <span class="o">=</span> <span class="o">-</span><span class="n">minusThree</span>
</span></code></pre></td></tr></table></div></figure>


<h6>一元加号</h6>

<p>一元加号直接返回值，不做任何改变</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">minusSix</span> <span class="o">=</span> <span class="o">-</span><span class="mi">6</span>
</span><span class='line'><span class="n">let</span> <span class="n">alsominusSix</span> <span class="o">=</span> <span class="o">+</span><span class="n">minusSix</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽管一元加号不改变任何值，但是你可以用它来和一元减号相匹配来保持代码一致。</p>

<h5>组合赋值操作符</h5>

<p>和C一样，Swift提供了组合赋值操作符。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">a</span> <span class="o">+=</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
组合赋值操作符，不返回任何值，和自增，自减不一样。
</code></pre>

<h5>比较操作符</h5>

<p>Swift支持所有的C的操作符：</p>

<ul>
<li>相等（a == b)</li>
<li>不等（a != b)</li>
<li>大于（a > b)</li>
<li>小于（a &lt; b)</li>
<li>大于等于(a >= b)</li>
<li><p>小于等于(a &lt;= b)</p>

<pre><code>注意
Swift还提供了相同操作符，===和!==，可以用来比较两个对象的引用是否指向同一个的对象。
</code></pre></li>
</ul>


<p>每一个比较操作符都返回一个Bool来表示是否为真：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">2</span> <span class="o">!=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">1</span>
</span><span class='line'><span class="mi">2</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>比较操作符通常用于条件语句中，例如if：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="s">&quot;world&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;hello,world&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;I&#39;m sorry \(name), but I don&#39;t recognize you&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>三元条件操作符</h5>

<p>三元条件操作符，还有三个部分，类似于 question ? answer1 : answer2。如果question是true，返回answer1的值，如果是false，返回answer2的值。它也可以写为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">question</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">answer1</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="n">answer2</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面的例子计算一个table的高度。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">contentHeight</span> <span class="o">=</span> <span class="mi">40</span>
</span><span class='line'><span class="n">let</span> <span class="n">hasHeader</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="n">let</span> <span class="n">rowHeight</span> <span class="err">＝</span> <span class="n">contentHeight</span> <span class="o">+</span> <span class="p">(</span><span class="n">hasHeader</span> <span class="o">?</span> <span class="mi">50</span> <span class="o">:</span> <span class="mi">20</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>三元条件操作符在一些情况下比if－else更简练。</p>

<h5>nil合并操作符</h5>

<p>nil合并操作符（a ?? b)，如果optional a有值，那么解包返回这个值，如果没有值，返回一个默认值b。a永远都是一个optional，b永远都是a里包含的值的类型。</p>

<p>nil合并操作符可以理解为下面代码的简写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">a</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">?</span> <span class="n">a</span><span class="o">!</span> <span class="o">:</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>nil合并操作符比上面的代码更简练。</p>

<pre><code>注意
如果a的值不是nil，那么b不会执行。
</code></pre>

<h5>区间操作符</h5>

<p>区间操作符有2个。</p>

<h6>闭区间操作符</h6>

<p>闭区间操作符，a&hellip;b。包含b。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">for</span> <span class="n">index</span> <span class="k">in</span> <span class="mf">1.</span><span class="p">.</span><span class="mf">.5</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;\(index) times 5 is \(index * 5)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>半开区间操作符</h6>

<p>半开区间操作符 a..&lt;b。不包含b。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Anna&quot;</span><span class="p">,</span> <span class="s">&quot;Alex&quot;</span><span class="p">,</span> <span class="s">&quot;Brian&quot;</span><span class="p">,</span> <span class="s">&quot;Jack&quot;</span><span class="p">]</span>
</span><span class='line'><span class="n">let</span> <span class="n">count</span> <span class="o">=</span> <span class="n">names</span><span class="p">.</span><span class="n">count</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mf">0.</span><span class="p">.</span><span class="o">&lt;</span><span class="n">count</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s">&quot;Person \(i + 1) is called \(names[i])&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>逻辑操作符</h5>

<p>逻辑操作符，修改或组合逻辑值。</p>

<ul>
<li>逻辑否   !a</li>
<li>逻辑与   a &amp;&amp; b</li>
<li>逻辑或    a || b</li>
</ul>


<h6>逻辑否</h6>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">a</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="n">let</span> <span class="n">b</span> <span class="o">=</span> <span class="o">!</span><span class="n">a</span> <span class="c1">// false</span>
</span><span class='line'><span class="n">let</span> <span class="n">c</span> <span class="o">=</span> <span class="o">!</span><span class="n">b</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<h6>逻辑与</h6>

<p>两个都为真，才真，如果a为假，b不计算，直接返回假。</p>

<h6>逻辑或</h6>

<p>两个有一个为真，就为真，如果a为真，b不计算，直接返回真。</p>

<h6>组合逻辑运算符</h6>

<h6>显式的圆括号</h6>

<p>有时候为了让代码可读性更好，在合适的地方添加括弧可以清晰的表达运算的优先级。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Language Guide: The Basics]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/09/27/language-guide-the-basics/"/>
    <updated>2014-09-27T15:54:49+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/09/27/language-guide-the-basics</id>
    <content type="html"><![CDATA[<p>Swift是一门iOS和OS X app开发的新语言，尽管如此，如果你用过C或者ObjC，Swift里很多部分你都不会陌生的。</p>

<p>Swift提供了C和ObjC所有的基础类型，包括Int来表示整数，Double和Float表示浮点数，Bool表示布尔值，String表示文本数据。Swift也提供了两个重要的集合类型，Array和Dictionary。</p>

<p>和C一样，Swift通过一个名字来标识变量，用变量来存储和引用相应的值。Swift也大量使用不可变的变量，也就是常量，但是要比C里的常量更加优秀。在你需要表示一些不可变的值的时候，使用常量让代码更安全，更清晰。</p>

<p>除了相似的类型，Swift也提供了在ObjC中没有的类型，例如元组。元组让你可以创建和传递一组值。你可以使用元组来把一组值作为一个组合的值从函数返回。</p>

<p>Swift也提出了Opional类型，用来表示一个没有的值。Optional表示要么这里有个值，就是x，要么这里就没有值。Optional有点像在ObjC中使用 nil,但是Optional可以用于任何类型，而不单是类。Optional比 nil指针更安全，而且更具有表达力，它也是Swift中许多特性的核心。</p>

<p>Optional是Swift是一个类型安全的语言的一个例子。Swift帮助你来清晰你的代码可以使用的类型。如果你的代码期望一个字符串，那么类型系统会禁止你传入一个整数。这样你就可以在开发阶段发现许多的错误。</p>

<h4>常量和变量</h4>

<p>常量和变量把一个名字（例如 maximumNumberOfLoginAttempts 或 welcomeMessage）和一个特定类型的值（例如 10 或者 &ldquo;Hello&#8221;）关联起来。常量的值，一旦设置之后就不能改变，而变量的值是可以改变的。</p>

<h5>声明变量和常量</h5>

<p>常量和变量必须在使用前被声明。用 let 来声明常量， var 来声明变量。下面这个例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">maximumNumberOfLoginAttempts</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">var</span> <span class="n">currentLoginAttempt</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码被理解为：</p>

<p>“声明一个常量，叫做 maximumNumberOfLoginAttempts，它的值是10。然后声明一个变量，叫做 currentLoginAttempt，它的初始值是 0.“</p>

<p>这个例子里，最大登录尝试次数是常量，而当前登录尝试次数是变量。</p>

<p>你可以在一行代码里声明多个常量或变量，用 , 分开：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
如果一个值不会改变，那么就把它声明为常量。只把那些会改变的值生命为变量。
</code></pre>

<h5>类型标注</h5>

<p>你可以在声明变量或常量时提供一个类型标注，来清晰的说明这个常量或变量可以存储的类型。在变量或常量的名字后面加一个冒号，一个空格，然后在跟上类型的名字。</p>

<p>下面这个例子里，表示了一个字符串类型的变量 welcomeMessage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="nl">welcomeMessage</span><span class="p">:</span> <span class="n">String</span>
</span></code></pre></td></tr></table></div></figure>


<p>声明里的冒号，可以理解为&#8221;&hellip;的类型&hellip;&ldquo;，所以，上面的代码可以理解为，声明一个变量，它的名字叫 welcomeMessage， 它的类型是 String。</p>

<p>“它的类型是 String”的意思是可以存储任何字符串值。</p>

<p>welcomeMessage 现在就可以被附值给任何字符串值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">welcomeMessage</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以在一行代码里声明多个同一类型的变量，由逗号分开，只需要在最后一个变量的后面加上类型标注。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">Double</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
实际上你很少需要去写类型标注。如果你给变量或常量一个初始化值，Swift可以推断出这个值的类型。
</code></pre>

<h5>常量和变量命名</h5>

<p>常量和变量的名字可以包含几乎所有的字符，包含unicode字符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="err">你好</span> <span class="o">=</span> <span class="s">&quot;你好，世界&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>常量和变量的名字不能包含空格字符，数学符号，箭头，私有或错误的Unicode字符，画线或画方框字符。也不能用数字开头，但是数字可以在其他任何地方。</p>

<p>一旦你声明了一个特定类型的常量或变量，你就不能再声明同样名字的常量或变量，也不能用它来存储不同类型的值。也不能从一个变量改到常量，反之亦然。</p>

<pre><code>注意
如果你需要定义一个常量或变量，它的名字和Swift的关键字一样，那你需要用 ` 来包含这个名字。但是除非必要，你不应该使用这样的名字。
</code></pre>

<p>一个改变一个已有的变量的值为另一个类型匹配的值。下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">friendlyWelcome</span> <span class="o">=</span> <span class="s">&quot;Hello!&quot;</span>
</span><span class='line'><span class="n">firendlyWelcome</span> <span class="o">=</span> <span class="s">&quot;Bonjour!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>和变量不同，常量的值一旦设置就无法改变，尝试改变的话，编译就会出错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">languageName</span> <span class="o">=</span> <span class="s">&quot;Swift&quot;</span>
</span><span class='line'><span class="n">languageName</span> <span class="o">=</span> <span class="s">&quot;Swift++&quot;</span> <span class="c1">//compile error</span>
</span></code></pre></td></tr></table></div></figure>


<h5>打印常量和变量</h5>

<p>你可以用 println 函数来打印一个常量或变量的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">println</span><span class="p">(</span><span class="n">friendlyWelcome</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>println 是一个全局函数，可以用来打印值到一个合适的输出，它会在最后打印一个换行符。在Xcode里，println 会打印到 console里。（还有一个函数，print，和println一样，但是不会打印换行符）</p>

<p>println 打印你传给它的任意字符串。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;This is a string&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>println 函数可以打印更复杂的log信息，和Cocoa的NSLog一样。这些信息可以包含变量或常量的值。</p>

<p>Swift 使用字符串插入来把常量或变量的名字作为占位符插入到一个长字符串里，并让Swift用变量或常量到值来代替这个名字。把名字放到圆括号里，在圆括号前面加一个反斜杠：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;The current value of friendlyWelcome is \(friendlyWelcome)&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
你在字符串插入时可用的选项在字符串插入中有详细介绍
</code></pre>

<h5>注释</h5>

<p>用注释来在代码中加入一段不会执行的文本，作为注解或给自己的提醒。注释在编译时会被忽略。</p>

<p>Swift注释和C的注释很相似。 单行注释由两个斜杠开始 (//):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// a comment</span>
</span></code></pre></td></tr></table></div></figure>


<p>多行注释开始于一个斜杠和一个星号 (/*)，结束于一个星号和一个斜杠 (*/)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* comment</span>
</span><span class='line'><span class="cm">with multiple lines */</span>
</span></code></pre></td></tr></table></div></figure>


<p>和C不一样，Swift里多行注释可以嵌套在其他多行注释里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/* first comment</span>
</span><span class='line'><span class="cm">/* senond comment nested in first comment */</span>
</span><span class='line'><span class="n">end</span> <span class="n">of</span> <span class="n">first</span> <span class="n">comment</span> <span class="err">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以嵌套的多行注释让你在注释代码的时候非常方便。</p>

<h5>分号</h5>

<p>Swift不像其他很多语言，要求你在每一个语句后面都加上分号，不过如果你愿意，你可以加。但是如果你在一行代码里写了多个语句，分号就是必须的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">cat</span> <span class="o">=</span> <span class="s">&quot;cat&quot;</span><span class="p">;</span> <span class="n">println</span><span class="p">(</span><span class="n">cat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h5>整数</h5>

<p>整数是没有小数部分的数字，例如42和－32.整数可以有符号的（正数，0，负数），也可以是无符号的（正数，0）。</p>

<p>Swift提供了8，16，32，64位的有符号和无符号整数。这些整数都有和C很相似的规则，8位无符号整数的类型是 UInt8，32位有符号整数是 Int32。和Swift里其他类型一样，所有这些整数类型都是首字母大写的。</p>

<h6>整数边界</h6>

<p>你可以通过 min 和 max 属性来访问每一个整数类型的最小值和最大值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">minValue</span> <span class="o">=</span> <span class="kt">UInt8</span><span class="p">.</span><span class="n">min</span>
</span><span class='line'><span class="n">let</span> <span class="n">maxValue</span> <span class="o">=</span> <span class="kt">UInt8</span><span class="p">.</span><span class="n">max</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些属性的值都是对应不同数字类型的，所以可以在类型匹配的表达式中使用。</p>

<h6>Int</h6>

<p>绝大多数时间，你不需要选择特定大小的整数类型，Swift提供了一个额外的整数类型 Int，它和当前系统单个字的大小一致：
*   在32位系统上，Int就是Int32
*   在64位系统上，Int就是Int64</p>

<p>除非你需要特定长度的整数，就使用 Int 就好了。这样代码会更一致，更好操作。即使在32位系统上，Int的范围 －2,147,483,648到2,147,483,647在很多情况也足够大了。</p>

<h6>UIint</h6>

<p>Swift也提供无符号大整数，UInt，它也和当前系统单个字的大小一致。
*   在32位系统上，Int就是UInt32
*   在64位系统上，Int就是UInt64</p>

<pre><code>注意
仅仅在需要的时候使用 UInt，一致的使用Int可以帮助代码一致，减少不同类型之间转换和类型推断。
</code></pre>

<h5>浮点数</h5>

<p>浮点数是有小数部分的数字，例如3.1415, 0.1, -2.714。</p>

<p>浮点数比Int类型表示和存储的数字范围大出许多。Swift提供了两类浮点数：
*   Double 表示了64位的浮点数。
*   Float 表示了32位的浮点数。</p>

<pre><code>注意
Double至少有15个小数位，Float至少有6个小数位。
</code></pre>

<h5>类型安全和类型推断</h5>

<p>Swift是类型安全的语言。一个类型安全的语言鼓励你在代码中清晰的表述你需要的类型。例如如果你的代码需要一个String，那就不能传递一个Int。</p>

<p>因为Swift是类型安全的，它会在编译时把任何类型不匹配的都标示为错误。这样你就可以在开发阶段捕获和修复这些错误。</p>

<p>类型检查帮助你使用不同类型的时候避免错误。然而，这不代表你必须把每一个变量或常量的类型都写出来。如果你给出值的类型，Swift会通过类型推断来推导出相应的类型。类型推导可以在编译的时候，根据你提供的值来推导出对应的类型。</p>

<p>因为有了类型推导，Swift比C和ObjC而言，很少需要你给出类型。常量和变量都还是有类型的，但绝大多数工作都已经为你做好了。</p>

<p>类型推断，在你声明变量或常量的同时给予一个初始值的时候，非常方便。你在声明变量和常量时，直接赋给字面量（字面量是你在代码中直接出现的值，例如42和3.14）</p>

<p>比如，如果你给一个常量附值42，而没有给出类型，Swift会把它推断成为一个Int。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">meaningOfLife</span> <span class="o">=</span> <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，如果你给你常量附值一个浮点数，Swift会把它推断为Double。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift在推断浮点数时总是优先选择Double。</p>

<p>如果你混合整数和浮点数在同一个表达式中，那么Double会成为表达式的值的类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">anotherPi</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mf">0.14159</span>
</span></code></pre></td></tr></table></div></figure>


<p>字面量 3 并没有显式类型，所以Double成为了最后的推导结果。</p>

<h5>数字字面量</h5>

<p>整数字面量可以写为：
*   一个十进制数，没有前缀。
*   一个二进制数，0b前缀。
*   一个八进制数，0o前缀。
*   一个十六进制数，0x前缀。</p>

<p>下面的数字都表示了十进制的 17:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">dec</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'><span class="n">let</span> <span class="n">bin</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b10001</span>
</span><span class='line'><span class="n">let</span> <span class="n">oct</span> <span class="o">=</span> <span class="mi">0</span><span class="n">o21</span>
</span><span class='line'><span class="n">let</span> <span class="n">hex</span> <span class="o">=</span> <span class="mh">0x11</span>
</span></code></pre></td></tr></table></div></figure>


<p>浮点数可以表示为十进制（无前缀）和十六进制（0x前缀）。它们必须在小数点两边都有数字。它们也可以有一个指数，十进制用大写或小写的e，十六进制用大写或小写的p。</p>

<p>有指数的十进制数，需要乘以以10为基的指数：
*   1.25e2，就是1.25*10*10，就是125.0
*   1.25e－2，就是1.25/100，就是0.0125</p>

<p>有指数的十六进制数，需要乘以以2为基的指数：
*   0xFp2，就是15*2*2,就是60.0
*   0xFp-2，就是15/4，就是3.75</p>

<p>下面这些字面量都是十进制的 12.1875:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">dec</span> <span class="o">=</span> <span class="mf">12.1875</span>
</span><span class='line'><span class="n">let</span> <span class="n">exp</span> <span class="o">=</span> <span class="mf">1.21875e1</span>
</span><span class='line'><span class="n">let</span> <span class="n">hex</span> <span class="o">=</span> <span class="mh">0xC</span><span class="mf">.3</span><span class="n">p0</span>
</span></code></pre></td></tr></table></div></figure>


<p>数字字面量可以添加额外的格式来让它们更易读。整数和浮点数都可以加额外的0和包含下划线来提高可读性。这些格式不会改变字面量的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">pedding</span> <span class="o">=</span> <span class="mf">000123.456</span>
</span><span class='line'><span class="n">let</span> <span class="n">oneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n">_000_000</span>
</span><span class='line'><span class="n">let</span> <span class="n">justOverOneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n">_000_000</span><span class="mf">.000</span><span class="n">_000_1</span>
</span></code></pre></td></tr></table></div></figure>


<h5>数字类型转换</h5>

<p>在一般情况下使用Int类型，即使这个值可能不会为负的。使用默认整数类型使得字面量也可以很好匹配。</p>

<p>在一些特殊情况下，例如数据来自外部，为了提供性能，优化内存使用或其他优化，可以使用特殊大小的整数类型。使用这些整数类型可以有效的捕获边界溢出。</p>

<h6>整数转换</h6>

<p>不同的整数类型所能存储的整数范围是不一样的。一个Int8类型只能存－128到127，而UInt8只能存0到255。如果尝试把范围外的值赋给一个变量或常量，会报编译错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="nl">cannotBeNegative</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="nl">tooBig</span><span class="p">:</span> <span class="n">Int8</span> <span class="o">=</span> <span class="n">Int8</span><span class="p">.</span><span class="n">max</span> <span class="o">+</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为每一个数字类型都能存不同范围的值，你必须在每种情况下来做类型转换。这种转换可以避免转换错误，并且使得代码里类型转换是明确的。</p>

<p>要把一个数字类型转到另一个类型，你用现有的值去初始化一个需要类型的变量或常量。下面的例子里：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="nl">twoThousand</span><span class="p">:</span> <span class="kt">UInt16</span> <span class="o">=</span> <span class="mi">2</span><span class="n">_000</span>
</span><span class='line'><span class="n">let</span> <span class="nl">one</span><span class="p">:</span> <span class="kt">UInt8</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">let</span> <span class="n">twoThousandAndOne</span> <span class="o">=</span> <span class="n">twoThousand</span> <span class="o">+</span> <span class="kt">UInt16</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>常量one和twoThousand不是同一类型的，所以不能做加法，需要把one转到UInt16来做。</p>

<p>SomeType(ofInitialValue)是调用一个类型的初始化函数（initializer），并传给它一个初始值的默认方式。在底层，UInt16有一个初始化函数，接受一个UInt8值来初始化这个UInt16值。这里你不能传递任何类型，而必须是UInt16提供了初始化函数的类型。我们将在扩展中讲解如何扩展现有的类型来提供能够接受新类型的初始化函数。</p>

<h6>整数和浮点数转换</h6>

<p>在整数和浮点数之前转换必须是显式的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">three</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">let</span> <span class="n">pointOneFourOneFiveNine</span> <span class="o">=</span> <span class="mf">0.14159</span>
</span><span class='line'><span class="n">let</span> <span class="n">pi</span> <span class="o">=</span> <span class="n">Double</span><span class="p">(</span><span class="n">three</span><span class="p">)</span> <span class="o">+</span> <span class="n">pointOneFourOneFiveNine</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，three被用来创建一个Double值，这样加号两边都是同一类型。如果没有这个转换，加法运算式不允许的。</p>

<p>浮点数到整数的转换也必须式显式的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">integerPi</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">pi</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>像这样用浮点数初始化整数，浮点数总是被截断的。这意味着4.75变成4，－3.9变成－3.</p>

<pre><code>注意
变量和常量的组合和字面量的组合不一样。字面量3和字面量0.14159可以直接相加而不用类型转换。结果的类型会在计算完毕后由编译器推导出来。
</code></pre>

<h5>类型别名</h5>

<p>类型别名允许给现有类型定义一个别名。使用typealias来定义。</p>

<p>当你需要使用一个更加有意义的名字来替换现有的类型的时候，类型别名是很有用的。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">typealias</span> <span class="n">AuidoSample</span> <span class="o">=</span> <span class="kt">UInt16</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦你定义了一个类型别名，那你就可以把它当作原来的类型使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="n">maxAmplitudeFound</span> <span class="o">=</span> <span class="n">AudioSample</span><span class="p">.</span><span class="n">min</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里，AudioSample是UInt16的别名。所以可以调用min来获取UInt16的最小值。</p>

<h5>布尔值</h5>

<p>Swift提供一个布尔类型，叫Bool。布尔值可以理解为逻辑值，因为它们只能是true或者false。Swift提供了2个布尔常量，true和false。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">orangesAreOrange</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="n">let</span> <span class="n">turnipsAreDelicious</span> <span class="o">=</span> <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>orangesAreOrange和turnipsAreDelicious都被推断为Bool类型。和上面的Int和Double一样，你不需要写出类型，而只需要用true或false来初始化它们。类型推导使得代码更简练，更可读。</p>

<p>布尔值在用在条件判断的时候非常有用，例如if：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">turnipsAreDelicious</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Mmm,tasty turnips!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;Eww,turnips are horrible.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>条件语句将在流程控制中详细讲解。</p>

<p>Swift的类型安全不允许把非布尔值作为布尔值使用。下面的会编译错误：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">if</span> <span class="n">i</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而，下面的是可以的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">1</span><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>i == 1 的结果是布尔类型，所以下面的代码是对的。操作符在基本操作符中介绍。</p>

<p>和其他类型安全的例子一样，这样做可以避免不小心的错误，并使得代码的意图总是很清楚。</p>

<h5>元组</h5>

<p>元组把多个值组合成为一个单独的值。元组里的值可以是任何的值，而且可以不一样。</p>

<p>下面的例子里，（404,&ldquo;Not Found&rdquo;)是一个表示http状态码的元组，一个http状态码是你访问一个web服务器返回的一个特定值，404表示你请求的网页不存在。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">http404Error</span> <span class="o">=</span> <span class="p">(</span><span class="mi">404</span><span class="p">,</span><span class="s">&quot;Not Found&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个元组，组合了一个整数和一个字符串，一个数字和一个人类可读的描述。它可以理解为一个类型是(Type,String)的元组。</p>

<p>你可以从任何类型的组合来创建元组，它们可以包含任意多不同的类型。</p>

<p>你可以把元组多值拆解出来：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="p">(</span><span class="n">statusCode</span><span class="p">,</span> <span class="n">statusMessage</span><span class="p">)</span> <span class="o">=</span> <span class="n">http404Error</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;code is \(statusCode)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;message is \(statusMessage)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你只需要某些元组的值，那在你拆解元组的时候，用 _ 来忽略你不需要的值：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="p">(</span><span class="n">justCode</span><span class="p">,</span><span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">http404Error</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;code is \(justCode)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，你可以通过索引值来访问的元组值，从0开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;code is \(http404Error.0)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;message is \(http404Error.1)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>你也可以在创建元组时，给每一个单独的元素定一个名字：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">http200Status</span> <span class="o">=</span> <span class="p">(</span><span class="nl">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nl">description</span><span class="p">:</span> <span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果元组的元素有名字，那你可以直接通过这些名字来访问这些元素：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;code is \(http200Status.statusCode)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;message is \(http200Status.description)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>元组在函数需要返回多个值的时候非常有用。比如一个函数用来获取网页可以返回一个(Int,String)的元组，这样可以把更多有用的信息返回给调用者。</p>

<pre><code>注意
元组只是在把相关的值组合起来时很方便，但是不应该被用来创建复杂的数据结构。复杂的数据结构应该用类或结构体来表示。
</code></pre>

<h5>Optionals</h5>

<p>当一个值可能不存在的时候，你就需要Optionals。一个Optional的意思是
*   如果有值，那么它就是这个值
*   如果没有值，那就是根本没有值</p>

<pre><code>注意
optional的概念在C和ObjC中不存在。最相似的是ObjC的函数可以返回nil表示值的不存在。然而，ObjC的nil只能用于对象，不能用于基础类型，结构体和枚举，对于这些类型，ObjC返回某个特定的值来表示值不存在。这里意味着调用者知道这个特殊值的意思是没有值。Swift的Optional允许你来表示对于任何类型的值不存在的情况，不需要其他特殊常量。
</code></pre>

<p>下面这个例子说明 optional是非常有用的。String有个toInt的方法，它尝试把String转换到一个Int。然而，不是所有的字符串都能转换到整数，&#8221;123“可以转换到123，但是&#8221;hello&#8221;却不行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">possibleNumber</span> <span class="o">=</span> <span class="s">&quot;123&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">convertedNumber</span> <span class="o">=</span> <span class="n">possibleNumber</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为toInt可能失败，所以它返回一个optional的Int，而不是Int。一个optional的Int,写成Int?，而不是Int。问号的意思是这个值可能存在，也可能不存在。</p>

<h6>nil</h6>

<p>你给一个optional附值为 nil， 可以把一个optional的值设置为无值的状态。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="nl">serverResponseCode</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span> <span class="o">=</span> <span class="mi">404</span>
</span><span class='line'><span class="n">serverResponseCode</span> <span class="o">=</span> <span class="nb">nil</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
nil不能用于非optional的常量或变量。如果你需要这种不存在的状态，你需要把变量和常量声明为optioanl的。
</code></pre>

<p>如果你声明一个optional的值，而没有给初始值，那它会附值为 nil。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">var</span> <span class="nl">surveyAnswer</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
Swift的nil和ObjC的nil不一样，在ObjC里，nil表示一个不存在的对象。而在Swift里，nil不是指针，它是某个类型的值不存在的表现。任何类型的optional都可以设置为nil，不仅仅是对象。
</code></pre>

<h6>if语句和强制解包（unwrap）</h6>

<p>你可以用if语句，拿optioanl和nil比较来知道这个optional是否包含一个值。</p>

<p>如果一个optional包含值，那么它就不等于nil：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">convertedNumber</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">prinln</span><span class="p">(</span><span class="s">&quot;has a number&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>一旦你确定optional确实包含一个值，那么你可以在optional的名字后面加一个感叹号 ！来访问它所包含的值。这个感叹号的意思是说，“我知道里面有值，请使用这个值”，这就叫做强制解包：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">convertedNumber</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">prinln</span><span class="p">(</span><span class="s">&quot;has an integer \(convertedNumber!)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
如果用 ！尝试访问一个不存在值的optional，将造成运行时错误。所以必须在确认optional有值的情况下使用！
</code></pre>

<h6>optional绑定</h6>

<p>使用optional绑定来查看一个optional是否还有值，如果有，则把它绑定到一个临时的常量或变量上。optional绑定可以用在if和while语句中来查看otional的值，并把值拿出来给后续使用。</p>

<p>我们可以重写上面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">actualNumber</span> <span class="o">=</span> <span class="n">possibleNumber</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;actualNumber \(actualNumber)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="s">&quot;not a number&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码的意思是 “如果possibleNumber.toInt()返回的optional还有一个值，把这个值附值给actualNumber“。</p>

<p>如果这个转变成功了，这个actualNumber就可以在if的第一个分支里使用，并且被optional的值初始化了，所以就不用 ！来访问真正的值了。</p>

<p>optional绑定里，你可以使用常量或变量。如果你打算在if的第一个分支里改变actualNumber的值，你可以下 if var actualNumber，这样optional的值就成为一个变量而不是常量。（[zxh]，这里改变的也是actualNumber，而不是optional本身，如果在绑定一次，值其实没有彼岸花）。</p>

<h6>自动解包的Optional</h6>

<p>如上所述，optional暗示了一个常量或变量可能是没有值的。optional可以通过if语句来查看是否有值，也可以通过optional绑定而被有条件的解包来使用真正的值。</p>

<p>有些时候，从程序结构的角度来说，如果一个optional如果被设置之后，它将永远都会有个值。在这种情况下，如果能够不用在每次需要访问这个值的时候去检查并且解包的话，是非常有意义的，因为我们可以确认它肯定有值。</p>

<p>这一类optional被定义为自动解包的optional。你在optional的类型后面，不写？而写一个！来标示它是一个自动解包的optional。</p>

<p>当一个optional的值可以确认在第一次定义之后永远都有一个值，使用自动解包的optional是有意义的。它的主要应用场景是在类初始化的时候。</p>

<p>在底层，自动解包的optional还是个optional。但是可以被当作非optional来用，不需要每次都解包。下面的例子展示了自动解包的optional和普通optional的区别：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="nl">posiibleString</span><span class="p">:</span> <span class="n">String</span><span class="o">?</span> <span class="o">=</span> <span class="s">&quot;an optional string&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">forcedString</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">possibleString</span><span class="o">!</span>
</span><span class='line'><span class="n">let</span> <span class="nl">assumedString</span><span class="p">:</span> <span class="n">String</span><span class="o">!</span> <span class="o">=</span> <span class="s">&quot;an implicitly unwrapped optional string&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="nl">implicitString</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="n">assumedString</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以认为自动解包的optional在每次被访问的时候都自动的被解包了。而不用每次访问都在后面加！，只需要在声明的时候在类型后面加！。</p>

<pre><code>注意
如果你在一个自动解包的optional不包含值的时候访问了它，这会是个运行时错误。这和普通optional的情况一模一样。
</code></pre>

<p>你也可以把自动解包的optional当作普通的optional来用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="n">assumedString</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">println</span><span class="p">(</span><span class="n">assumedString</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>注意
如果一个optional在某个时间会没有值，那就不要使用自动解包的optional。对于在声明周期中有可能为nil的时候总是用普通的optional。
</code></pre>

<h5>断言</h5>

<p>optionals让你可以检查一个可能存在也可能不存在的值，并在不存在值的时候写出优雅的处理方式。但是有些时候，如果一个值不存在，程序就无法继续进行。这时候，你应该使用断言来结束代码的执行来调试出现值不存在的原因。</p>

<h6>使用断言来调试</h6>

<p>一个断言是在运行时对一个条件是否为true的检查。从字面意思说就是，断言一个条件为true。在执行任何代码之前，使用断言来确定某个特定的条件为true。如果为true，代码执行，如果为false，代码停止执行，程序退出。</p>

<p>如果你在开发阶段触发了断言，那么就能清楚的看到这个断言的位置，并可以查看造成断言的原因。断言也允许你提供一些调试信息。</p>

<p>使用全局函数 assert 来写一个断言。传给她一个条件表达式，和当条件表达式是false的时候的一个提示信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">let</span> <span class="n">age</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span>
</span><span class='line'><span class="n">assert</span><span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;a age can not be less than 0&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个例子了，如果age >= 0为true，后续代码执行，如果为false，则程序退出。</p>

<p>断言信息不是必须的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">assert</span><span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h6>何时使用断言</h6>

<p>当一个条件有可能是false，但是你的代码又要求它必须是true的时候使用断言。比较好的地方如下：</p>

<ul>
<li>把一个脚标传入到一个自定义的脚标实现，这个值可能越界。</li>
<li>给函数传值，但是这个值不符合函数的要求。</li>
<li><p>optional为nil，但是你需要它不是nil。</p>

<pre><code>注意
断言会使程序退出，并不代表需要你设计你的代码让不符合条件的情况不会发生。然而，在开发阶段，断言是发现这些可能造成不符合条件的情况是非常有效的办法。
</code></pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to Swift - a Swift Tour]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/09/14/welcome-to-swift-a-swift-tour/"/>
    <updated>2014-09-14T18:29:00+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/09/14/welcome-to-swift-a-swift-tour</id>
    <content type="html"><![CDATA[<p>传统来说，我们学习一门语言的第一个程序将是HelloWorld。在Swift里，非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;Hello,World&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果你之前写过C或者Objc的代码，这个语法你应该不陌生，在Swift里，这行代码就是一个完整的程序，你不需要导入其他库来使用输入输出或者字符串处理。写在全局作用域的代码被用来作为程序的入口，所以你不需要一个main函数。你也不用在每一个语句后面写上分号。</p>

<p>这里我们将通过许多的例子来给你足够的知识让你能够开始用Swift写代码。遇到不能理解的地方也不要紧，这里的所有内容在这本书的剩余部分都会详细介绍。</p>

<h4>Simple Values （基础值）</h4>

<p>用let来声明常量，var声明变量。常量的值不需要在编译期知道，但是你只能赋值一次，这意味着你用常量来定义一次，然后在很多地方使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">myVariable</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'><span class="n">myVariable</span> <span class="o">=</span> <span class="mi">48</span>
</span><span class='line'><span class="n">let</span> <span class="n">myConstant</span> <span class="o">=</span> <span class="mi">42</span>
</span></code></pre></td></tr></table></div></figure>


<p>常量和变量必须具有和你赋值给他们的值相同的类型，但是你并不需要总是明确的写出他们的类型。你只管提供值，让编译器决定类型。在上面的例子里，myVaribale将是整数类型，因为它的初始化值是整数。</p>

<p>如果一个初始化值不足以提供类型信息，那你就必须提供类型，写在变量的后面，用冒号隔开。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">implictInteger</span> <span class="o">=</span> <span class="mi">70</span>
</span><span class='line'><span class="n">let</span> <span class="n">implictDouble</span> <span class="o">=</span> <span class="mi">70</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="n">let</span> <span class="n">explictDouble</span> <span class="p">:</span> <span class="no">Double</span> <span class="o">=</span> <span class="mi">70</span>
</span></code></pre></td></tr></table></div></figure>


<p>值永远都不会隐式转换为其他类型。如果你需要转换一个值到另外一个类型，你需要显式转化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">label</span> <span class="o">=</span> <span class="s2">&quot;The width is &quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">94</span>
</span><span class='line'><span class="n">let</span> <span class="n">widthLabel</span> <span class="o">=</span> <span class="n">label</span> <span class="o">+</span> <span class="nb">String</span><span class="p">(</span><span class="n">width</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实有更简单的办法在字符串中插入值，把值写在括号里，在括号前面写一个 \ 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">apples</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">let</span> <span class="n">oranges</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="n">let</span> <span class="n">appleSummary</span> <span class="o">=</span> <span class="s2">&quot;I have \(apples) apples&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">fruitSummary</span> <span class="o">=</span> <span class="s2">&quot;I have \(apples + oranges) pieces of fruit.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用[ ]来创建数组和字典，在[ ]里写上索引或键来访问数字和字典里的元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">shoppingList</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;catfish&quot;</span><span class="p">,</span> <span class="s2">&quot;water&quot;</span><span class="p">,</span> <span class="s2">&quot;tulips&quot;</span><span class="p">,</span> <span class="s2">&quot;blue paint&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">shoppingList</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;bottle of water&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">occupations</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;Malcolm&quot;</span> <span class="p">:</span> <span class="s2">&quot;Captain&quot;</span> <span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Kaylee&quot;</span>  <span class="p">:</span> <span class="s2">&quot;Mechanic&quot;</span><span class="p">,</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="n">occupations</span><span class="o">[</span><span class="s2">&quot;Jayne&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Public Relations&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建空的数字和字典，用初始化语法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">emptyArray</span> <span class="o">=</span> <span class="o">[</span><span class="nb">String</span><span class="o">]</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="n">emptyDictionary</span> <span class="o">=</span> <span class="o">[</span><span class="nb">String</span><span class="ss">:Float</span><span class="o">]</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Control Flow（控制流程）</h4>

<p>用 if 和 switch 来做条件分支，用 for-in，for，while，do-while 来做循环。在条件分支和循环里的括号是可选的，但是包含代码的大括号是必须的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">individualScores</span> <span class="o">=</span> <span class="o">[</span><span class="mi">75</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">teamScore</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">score</span> <span class="k">in</span> <span class="n">individualScores</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="mi">50</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">teamScore</span> <span class="o">+=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">teamScore</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 if 语句里，条件值必须是布尔表达式，这意味着 if score {} 是错误的，这里不会隐式的和 0 比较。</p>

<p>你可以用 if 和 let 一起处理那些可能不存在的值。这些值被表达为Optional，一个Optional的值要么包含一个值，要么包含 nil 来表示值不存在。 在值的类型后面加个 ？表示Optional。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">optionalString</span> <span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'><span class="n">optionalString</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">var</span> <span class="n">optionalName</span> <span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="o">=</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="nb">name</span> <span class="o">=</span> <span class="n">optionalName</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello,\(name)&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果Optional的值为 nil，条件就是 false，大括号里的代码就被略过了，否则，Optional的值被解包(Unwrap)并赋值给了在 let 后面的常量，这样这个常量在下面的代码快里也是可见的。</p>

<p>switch 支持任何种类的数据和多种多样的比较奥做，它们不局限于整数和相等性比较。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">vegetable</span> <span class="o">=</span> <span class="s2">&quot;red pepper&quot;</span>
</span><span class='line'><span class="n">switch</span> <span class="n">vegetable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s2">&quot;celery&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">vegerableComent</span> <span class="o">=</span> <span class="s2">&quot;Add some raisins and make ants on a log.&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s2">&quot;cucumber&quot;</span><span class="p">,</span> <span class="s2">&quot;watercress&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">vegerableComment</span> <span class="o">=</span> <span class="s2">&quot;That would make a good tea sandwich.&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">let</span> <span class="n">x</span> <span class="n">where</span> <span class="n">x</span><span class="o">.</span><span class="n">hasSuffix</span><span class="p">(</span><span class="s2">&quot;pepper&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">vegetableComment</span> <span class="o">=</span> <span class="s2">&quot;Is it a spicy \(x) ?&quot;</span>
</span><span class='line'>    <span class="ss">default</span><span class="p">:</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">vegetableComment</span> <span class="o">=</span> <span class="s2">&quot;Everything tastes good in soup.&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意如何在一个模式中使用 let 来把匹配的值赋值给一个常量。</p>

<p>在执行完匹配的case里的代码，程序就离开了switch语句。代码不会继续执行下一个case，所以不需要显示的从每一个case里 break 出来。</p>

<p>你可以用 for-in 来遍历一个字典里的内容，你需要提供一对名字来匹配每一个键值对。字典是无序集合，所以键值对的顺序是任意的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">interestingNumbers</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;Prime&quot;</span> <span class="p">:</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">13</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Fibonacci&quot;</span> <span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Square&quot;</span> <span class="p">:</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">25</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">largest</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">kind</span><span class="p">,</span><span class="n">numbers</span><span class="p">)</span> <span class="k">in</span> <span class="n">interestingNumbers</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="n">largest</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">largest</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> 使用 while 来重复一段代码直到条件改变。条件也可以放在尾部，保证代码至少执行一次。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">var</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'> <span class="k">while</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">100</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="n">n</span>
</span><span class='line'> <span class="n">var</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'> <span class="k">do</span><span class="p">{</span>
</span><span class='line'>     <span class="n">m</span> <span class="o">=</span> <span class="n">m</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'> <span class="p">}</span> <span class="k">while</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="mi">100</span>
</span><span class='line'> <span class="n">m</span>
</span></code></pre></td></tr></table></div></figure>


<p> 你可以在循环中持有一个索引，可以通过 ..&lt; 来创建一个区间， 或是显式的初始化，条件，增加。 下面两个循环做的事情是一样的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">firstLoop</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">&lt;</span><span class="mi">4</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">firstLoop</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">firstLoop</span>
</span><span class='line'><span class="n">var</span> <span class="n">secondLoop</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">secondLoop</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">secondLoop</span>
</span></code></pre></td></tr></table></div></figure>


<p>..&lt; 不包含最大值，半开区间[ ), &hellip;包含最大值，闭区间 [ ]。</p>

<h4>Functions and Closures (函数与闭包)</h4>

<p>用 func 来声明一个函数，在函数名后面加上括弧，在括弧里传入参数来调用函数。用 -> 区分参数名字和函数的返回类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">greet</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">day</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;Hello \(name), today is \(day)&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">greet</span><span class="p">(</span><span class="s2">&quot;Bob&quot;</span><span class="p">,</span><span class="s2">&quot;Tuesday&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用元组来表示一个组合值，比如从一个函数返回多个值。元组的元素可以用过名字或数字来引用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">calculateStatistics</span><span class="p">(</span><span class="ss">scores</span><span class="p">:</span> <span class="o">[</span><span class="no">Int</span><span class="o">]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="ss">min</span><span class="p">:</span> <span class="no">Int</span><span class="p">,</span> <span class="ss">max</span><span class="p">:</span> <span class="no">Int</span><span class="p">,</span> <span class="ss">sum</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">min</span> <span class="o">=</span> <span class="n">scores</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">max</span> <span class="o">=</span> <span class="n">scores</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">score</span> <span class="k">in</span> <span class="n">scores</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="n">max</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">max</span> <span class="o">=</span> <span class="n">score</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="n">score</span> <span class="o">&lt;</span> <span class="n">min</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">min</span> <span class="o">=</span> <span class="n">score</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">score</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="k">return</span> <span class="p">(</span><span class="n">min</span><span class="p">,</span> <span class="n">max</span><span class="p">,</span> <span class="n">sum</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">statistics</span> <span class="o">=</span> <span class="n">calculateStatistics</span><span class="p">(</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">statistics</span><span class="o">.</span><span class="n">sum</span>
</span><span class='line'><span class="n">statistics</span><span class="o">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数也可以接受不定数量的参数，会收集在一个数组里。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">sumOf</span><span class="p">(</span><span class="n">numbers</span> <span class="p">:</span> <span class="no">Int</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">()</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span><span class="mi">597</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数可以嵌套，被嵌套的函数可以访问外层函数里的变量。可以使用嵌套函数来组织比较复杂或冗长的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">returnFifteen</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">add</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">add</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">returnFifteen</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数是一等类型。这意味着函数可以作为其他函数的返回值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">makeIncrementer</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="no">Int</span> <span class="o">-&gt;</span> <span class="no">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">addOne</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">addOne</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">increment</span> <span class="o">=</span> <span class="n">makeIncrementer</span><span class="p">()</span>
</span><span class='line'><span class="n">increment</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数也可以接受其他函数作为参数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">hasAnyMatches</span><span class="p">(</span><span class="ss">list</span><span class="p">:</span> <span class="o">[</span><span class="no">Int</span><span class="o">]</span><span class="p">,</span> <span class="ss">condition</span><span class="p">:</span> <span class="no">Int</span> <span class="o">-&gt;</span> <span class="no">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">condition</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">lessThanTen</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">20</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="n">hasAnyMatches</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">lessThanTen</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>函数其实是一种特殊的闭包（一些代码可以在稍后被调用）。闭包里的代码可以访问那些在闭包被创建的作用域里可以见的变量和函数，即使闭包在另外的作用域被执行（嵌套函数的那个例子里就是这样）。你可以写一个没有名字的闭包，把代码直接包含在大括号里，使用 in 把参数，返回值和函数体区分开来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">map</span><span class="p">({</span>
</span><span class='line'>    <span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>你还有一些选项可以把闭包写的更精确。当一个闭包的类型是已知的，例如delegate的回调，你可以省略闭包的参数的类型，或者它的返回值，或者两个都省略。单个语句的闭包隐式的返回他们的唯一的语句的值。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">mappedNumbers</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">map</span><span class="p">({</span> <span class="n">number</span> <span class="k">in</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span> <span class="p">})</span>
</span><span class='line'><span class="n">mappedNumbers</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以在闭包里通过数字引用参数而不是名字（这种方式在非常短的闭包里非常有用）。一个闭包如果作为一个函数的最后一个参数，可以把闭包的代码写在函数调用的括弧后面。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="n">sortedNumber</span> <span class="o">=</span> <span class="n">sorted</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="p">{</span> <span class="vg">$0</span> <span class="o">&gt;</span> <span class="vg">$1</span> <span class="p">}</span>
</span><span class='line'><span class="n">sortedNumber</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Objects and Classes (对象与类)</h4>

<p>使用 class 加上类名来创建一个类。 在类里声明属性和声明一个常量，变量一样，只是在类的上下文里。同样，方法和函数的声明也一样的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Shape</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">numberOfSides</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;A shape with \(numberOfSides) sides&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在类名后面加上括弧来创建实例。用 . 来访问属性和方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">shape</span> <span class="o">=</span> <span class="no">Shape</span><span class="p">()</span>
</span><span class='line'><span class="n">shape</span><span class="o">.</span><span class="n">numberOfSides</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="n">var</span> <span class="n">shapeDescription</span> <span class="o">=</span> <span class="n">shape</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个版本的Shape类缺少一个重要的东西，一个在实例被创建时的初始化函数。用 init 来创建一个。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NamedShape</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">numberOfSides</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">var</span> <span class="nb">name</span> <span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nb">name</span><span class="ss">:String</span><span class="p">){</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;A shape with \(numberOfSides) sides&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意在初始化函数里，如何用 self 来区分属性和参数。 参数在创建一个类的实例像函数调用一样传递给了初始化函数。每一个属性都需要赋值，不管是在声明的时候还是在初始化函数里。</p>

<p>使用 deinit 来创建一个析构函数(deinitializer)在对象被deallocated的时候做一些清理工作。</p>

<p>子类在自己的类名后面标注它们的父类，用冒号隔开。Swift并没有一个强制要求的标准基类，你可以包含一个基类，也可以省略。</p>

<p>子类里重写父类的实现的方法需要标记为 override， 如果没有写 override 却重写了父类的方法，编译器会报错。如果写了 override 但并不是真的重写了一个方法，编译器也会报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Square</span><span class="p">:</span> <span class="no">NamedShape</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">sideLength</span><span class="p">:</span> <span class="no">Double</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="no">Double</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">sideLength</span> <span class="o">=</span> <span class="n">sideLength</span>
</span><span class='line'>        <span class="k">super</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">numberOfSides</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">area</span><span class="p">()</span> <span class="o">-&gt;</span>  <span class="no">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sideLength</span> <span class="o">*</span> <span class="n">sideLength</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;A square with sides of length \(sideLength).&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="nb">test</span> <span class="o">=</span> <span class="no">Square</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="mi">5</span><span class="o">.</span><span class="mi">2</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;my test square&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">test</span><span class="o">.</span><span class="n">area</span><span class="p">()</span>
</span><span class='line'><span class="nb">test</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了简单的被存储属性，属性还可以有 getter 和 setter。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">EquilateralTriangle</span><span class="p">:</span> <span class="no">NamedShape</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">sideLength</span><span class="p">:</span> <span class="no">Double</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="no">Double</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">sideLength</span> <span class="o">=</span> <span class="n">sideLength</span>
</span><span class='line'>        <span class="k">super</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">numberOfSides</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">perimeter</span><span class="p">:</span> <span class="no">Double</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">get</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span> <span class="o">*</span> <span class="n">sideLength</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">set</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">sideLength</span> <span class="o">=</span> <span class="n">newValue</span> <span class="o">/</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;An equilateral triangle with sides of length \(sideLength).&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">triangle</span> <span class="o">=</span> <span class="no">EquilateralTriangle</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;a triangle&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">triangle</span><span class="o">.</span><span class="n">perimeter</span>
</span><span class='line'><span class="n">triangle</span><span class="o">.</span><span class="n">perimeter</span> <span class="o">=</span> <span class="mi">9</span><span class="o">.</span><span class="mi">9</span>
</span><span class='line'><span class="n">triangle</span><span class="o">.</span><span class="n">sideLength</span>
</span></code></pre></td></tr></table></div></figure>


<p>在 perimeter 的 setter里，新的值默认的名字叫 newValue，你也可以显式的在set后面加上名字。</p>

<p>注意在 EquilateralTriangle 的 init有三个不同的步骤：</p>

<ol>
<li>  设置子类声明的属性。</li>
<li>  调用父类的初始化函数。</li>
<li>  修改父类定义的属性，还有任何其他的初始化工作都可以在这一时刻进行。</li>
</ol>


<p>如果你不需要计算一个属性，但是在它被改变之前和之后需要执行代码的话，可以使用 willSet 和 didSet。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TriangleAndSquare</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">triangle</span><span class="p">:</span> <span class="no">EquilateralTriangle</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">willSet</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">square</span><span class="o">.</span><span class="n">sideLength</span> <span class="o">=</span> <span class="n">newValue</span><span class="o">.</span><span class="n">sideLength</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">square</span><span class="p">:</span> <span class="no">Square</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">willSet</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">triangle</span><span class="o">.</span><span class="n">sideLength</span> <span class="o">=</span> <span class="n">newValue</span><span class="o">.</span><span class="n">sideLength</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="ss">size</span><span class="p">:</span> <span class="no">Double</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">square</span> <span class="o">=</span> <span class="no">Square</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="n">size</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>        <span class="n">triangle</span> <span class="o">=</span> <span class="no">EquilateralTriangle</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="n">size</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">triangleAndSquare</span> <span class="o">=</span> <span class="no">TriangleAndSquare</span><span class="p">(</span><span class="ss">size</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;another test shape&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">triangleAndSquare</span><span class="o">.</span><span class="n">square</span><span class="o">.</span><span class="n">sideLength</span>
</span><span class='line'><span class="n">triangleAndSquare</span><span class="o">.</span><span class="n">triangle</span><span class="o">.</span><span class="n">sideLength</span>
</span><span class='line'><span class="n">triangleAndSquare</span><span class="o">.</span><span class="n">square</span> <span class="o">=</span> <span class="no">Square</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;larger square&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">triangleAndSquare</span><span class="o">.</span><span class="n">triangle</span><span class="o">.</span><span class="n">sideLength</span>
</span></code></pre></td></tr></table></div></figure>


<p>类里的方法和函数有一个重要的区别。函数的参数名只用在函数里面，但是方法的参数名在调用方法的时候也需要用到(除了第一个)。默认情况下，一个方法在调用时和方法内部时用同一个参数名字，但是你也可以给出第二个名字，用在方法内部。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Counter</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">count</span><span class="p">:</span> <span class="no">Int</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">incrementBy</span><span class="p">(</span><span class="ss">amount</span><span class="p">:</span> <span class="no">Int</span><span class="p">,</span> <span class="n">numberOfTimes</span> <span class="ss">times</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">count</span> <span class="o">+=</span> <span class="n">amount</span> <span class="o">*</span> <span class="n">times</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">counter</span> <span class="o">=</span> <span class="no">Counter</span><span class="p">()</span>
</span><span class='line'><span class="n">counter</span><span class="o">.</span><span class="n">incrementBy</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="ss">numberOfTimes</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>当使用Optional时，你可以在方法，属性和下标的操作之前加上 ? 。如果在 ？ 之前的值是 nil， 所有在 ？ 之后的都被忽略并且整个表达式的值也是 nil。 否则，Optional的值被解包， ？ 之后的所有都处理在这个解包后的值。在这两种情况下，整个表达式的值都是Optional。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="ss">optionalSquare</span><span class="p">:</span> <span class="no">Square</span><span class="p">?</span> <span class="o">=</span> <span class="no">Square</span><span class="p">(</span><span class="ss">sideLength</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;optional square&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">sideLength</span> <span class="o">=</span> <span class="n">optionalSquare?</span><span class="o">.</span><span class="n">sideLength</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Enumerations and Structures (枚举与结构)</h4>

<p>使用 enum 来创建枚举，像 class 和其他所有有名类型一样，枚举也可以有方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">enum</span> <span class="ss">Rank</span><span class="p">:</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Ace</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Two</span><span class="p">,</span> <span class="no">Three</span><span class="p">,</span> <span class="no">Four</span><span class="p">,</span> <span class="no">Five</span><span class="p">,</span> <span class="no">Six</span><span class="p">,</span> <span class="no">Seven</span><span class="p">,</span> <span class="no">Eight</span><span class="p">,</span> <span class="no">Nine</span><span class="p">,</span> <span class="no">Ten</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Jack</span><span class="p">,</span> <span class="no">Queen</span><span class="p">,</span> <span class="no">King</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">Ace</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;ace&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">Jack</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;jack&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">Queen</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;queen&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">King</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;king&quot;</span>
</span><span class='line'>        <span class="ss">default</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">toRaw</span><span class="p">())</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">ace</span> <span class="o">=</span> <span class="no">Rank</span><span class="o">.</span><span class="n">Ace</span>
</span><span class='line'><span class="n">let</span> <span class="n">aceRawValue</span> <span class="o">=</span> <span class="n">ace</span><span class="o">.</span><span class="n">toRaw</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子里，枚举的原始类型(raw type)是 Int，所以你只需要给出第一个枚举的值，其他的会自动赋值。你可以使用字符串和浮点数来作为枚举的原始类型。</p>

<p>使用 toRaw 和 fromRaw 来在原始值和枚举值之前转化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">convertedRank</span> <span class="o">=</span> <span class="no">Rank</span><span class="o">.</span><span class="n">fromRaw</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">threeDescription</span> <span class="o">=</span> <span class="n">convertedRank</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>枚举的成员值是实际的值，而不是原始值的另外一种写法，事实上，如果没有合适的原始值，你可以不提共。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">enum</span> <span class="no">Suit</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Spades</span><span class="p">,</span> <span class="no">Hearts</span><span class="p">,</span> <span class="no">Diamonds</span><span class="p">,</span> <span class="no">Clubs</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">Spades</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;spades&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">Hearts</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;hearts&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">Diamonds</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;diamonds&quot;</span>
</span><span class='line'>        <span class="k">case</span> <span class="o">.</span><span class="n">Clubs</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;clubs&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">hearts</span> <span class="o">=</span> <span class="no">Suit</span><span class="o">.</span><span class="n">Hearts</span>
</span><span class='line'><span class="n">let</span> <span class="n">heartsDescription</span> <span class="o">=</span> <span class="n">hearts</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意 Hearts 被引用的时侯的两种方式，当赋值的时候， Suit.Hearts 全名被使用，因为不知道常量的类型；在 switch里，因为 self 的类型已知，所以使用了 .Hearts 简短的名字。你可以在任何类型已知的情况下使用简短的名字。</p>

<p>使用 struct 来创建一个结构体。结构体和类有很多一样的行为，包括方法和初始化方法。它们两个最重要的区别就是结构体在你代码里来回传递的时候总是被拷贝的，而类则是传递引用（reference）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">struct</span> <span class="no">Card</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">rank</span><span class="p">:</span> <span class="no">Rank</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">suit</span><span class="p">:</span> <span class="no">Suit</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;The \(rank.simpleDescription()) of \(suit.simpleDescription())&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">threeOfSpades</span> <span class="o">=</span> <span class="no">Card</span><span class="p">(</span><span class="ss">rank</span><span class="p">:</span> <span class="o">.</span><span class="n">Three</span><span class="p">,</span> <span class="ss">suit</span><span class="p">:</span> <span class="o">.</span><span class="n">Spades</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">threeOfSpadesDescription</span> <span class="o">=</span> <span class="n">threeOfSpades</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>一个枚举实例的枚举成员可以有这个实例的关联值（assocaited value），同一个枚举成员的不同实例可以有不同的关联值。你在创建这个实例的时候提供关联值。关联值和原始值是不一样的，一个枚举成员的原始值对于所有的实例都一样，而且你是在定义枚举类型的时候提供原始值。</p>

<p>例如，向一个服务器请求日出和日落时间，服务器要么返回值，要么返回错误。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">enum</span> <span class="no">ServerResponse</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Result</span><span class="p">(</span><span class="nb">String</span><span class="p">,</span> <span class="nb">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Error</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">success</span> <span class="o">=</span> <span class="no">ServerResponse</span><span class="o">.</span><span class="n">Result</span><span class="p">(</span><span class="s2">&quot;6:00 am&quot;</span><span class="p">,</span> <span class="s2">&quot;8:09 pm&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">let</span> <span class="n">failure</span> <span class="o">=</span> <span class="no">ServerResponse</span><span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="s2">&quot;Out of cheese.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">switch</span> <span class="n">success</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span> <span class="o">.</span><span class="n">Result</span><span class="p">(</span><span class="n">sunrise</span><span class="p">,</span> <span class="n">sunset</span><span class="p">):</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">serverResponse</span> <span class="o">=</span> <span class="s2">&quot;Sunrise is at \(sunrise) and sunset is at \(sunset).&quot;</span>
</span><span class='line'><span class="k">case</span> <span class="n">let</span> <span class="o">.</span><span class="n">Error</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">serverResponse</span> <span class="o">=</span> <span class="s2">&quot;Failure...  \(error)&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，日出和日落的值是如何从 ServerResponse 里匹配出来的。</p>

<h4>Protocol and Extensions (协议和扩展)</h4>

<p>使用 protocol 来声明一个协议。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">protocol</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>类，枚举和结构体都可以实现协议。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SimpleClass</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="s2">&quot;A very simple class.&quot;</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">anotherProperty</span><span class="p">:</span> <span class="no">Int</span> <span class="o">=</span> <span class="mi">69105</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">simpleDescription</span> <span class="o">+=</span> <span class="s2">&quot;  Now 100% adjusted.&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="no">SimpleClass</span><span class="p">()</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">adjust</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="n">aDescription</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">simpleDescription</span>
</span><span class='line'><span class="n">struct</span> <span class="ss">SimpleStructure</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="s2">&quot;A simple structure&quot;</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">simpleDescription</span> <span class="o">+=</span> <span class="s2">&quot; (adjusted)&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">b</span> <span class="o">=</span> <span class="no">SimpleStructure</span><span class="p">()</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">adjust</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="n">bDescription</span> <span class="o">=</span> <span class="n">b</span><span class="o">.</span><span class="n">simpleDescription</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意例子中使用 mutating 关键字来标识方法会修改结构体。类的方法不用标识为 mutating，因为类的方法总是可以修改这个类。</p>

<p>使用 extension 来给现有的类型增加功能，例如方法和计算的属性。你可以使用 extension 来给一个类型增加协议的实现。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">extension</span> <span class="ss">Int</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;The number \(self)&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span> <span class="o">+=</span> <span class="mi">42</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="mi">7</span><span class="o">.</span><span class="n">simpleDescription</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以把协议名字当作任何其他有名字的类型来用，例如，创建一个对象的集合，对象有着不同的类型，但是都实现了同一个协议。当你使用类型为协议类型的值时，只有协议定义的方法是可以用的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span> <span class="ss">protocolValue</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="o">=</span> <span class="n">a</span>
</span><span class='line'><span class="n">protocolValue</span><span class="o">.</span><span class="n">simpleDescription</span>
</span><span class='line'><span class="sr">//</span> <span class="n">protocolValue</span><span class="o">.</span><span class="n">anotherProperty</span>  <span class="sr">//</span> <span class="no">Uncomment</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<p>尽管 protocolValue 在运行时是 SimpleClass类别的，编译器认为它就是 ExampleProtocol类型。这意味着你不能偶然的访问到类和协议都有的方法和属性(not sure.)</p>

<h4>Generics (泛型)</h4>

<p>把名字写到尖括号里来创建一个泛型函数或者类型。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">repeat</span><span class="o">&lt;</span><span class="no">ItemType</span><span class="o">&gt;</span><span class="p">(</span><span class="ss">item</span><span class="p">:</span> <span class="no">ItemType</span><span class="p">,</span> <span class="ss">times</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="no">ItemType</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="o">[</span><span class="no">ItemType</span><span class="o">]</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">&lt;</span><span class="n">times</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">repeat</span><span class="p">(</span><span class="s2">&quot;knock&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以定义泛型的函数，方法，也可以定义泛型的类，枚举，结构体。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">enum</span> <span class="no">OptionalValue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span> <span class="sr">//</span> <span class="no">Reimplement</span> <span class="n">the</span> <span class="no">Swift</span> <span class="n">standard</span> <span class="n">library</span><span class="err">&#39;</span><span class="n">s</span> <span class="n">optional</span> <span class="n">type</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">None</span>
</span><span class='line'>    <span class="k">case</span> <span class="no">Some</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="ss">possibleInteger</span><span class="p">:</span> <span class="no">OptionalValue</span><span class="o">&lt;</span><span class="no">Int</span><span class="o">&gt;</span> <span class="o">=</span> <span class="o">.</span><span class="n">None</span>
</span><span class='line'><span class="n">possibleInteger</span> <span class="o">=</span> <span class="o">.</span><span class="n">Some</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在类型名字后面使用 where 来给出一系列要求，例如，要求这个类型必须实现某个协议，要求两个类型必须一样，或者要求需要某一个特定的父类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">anyCommonElements</span> <span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span> <span class="n">where</span> <span class="ss">T</span><span class="p">:</span> <span class="no">SequenceType</span><span class="p">,</span> <span class="ss">U</span><span class="p">:</span> <span class="no">SequenceType</span><span class="p">,</span> <span class="n">T</span><span class="o">.</span><span class="n">Generator</span><span class="o">.</span><span class="n">Element</span><span class="p">:</span> <span class="no">Equatable</span><span class="p">,</span> <span class="n">T</span><span class="o">.</span><span class="n">Generator</span><span class="o">.</span><span class="n">Element</span> <span class="o">==</span> <span class="n">U</span><span class="o">.</span><span class="n">Generator</span><span class="o">.</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">(</span><span class="ss">lhs</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="ss">rhs</span><span class="p">:</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">lhsItem</span> <span class="k">in</span> <span class="n">lhs</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">rhsItem</span> <span class="k">in</span> <span class="n">rhs</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">lhsItem</span> <span class="o">==</span> <span class="n">rhsItem</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">anyCommonElements</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子里，你可以省略 where 直接把协议或者类名写在一个冒号后面。 写 &lt;T: Equatable> 和 <T where T : Equatable> 是一样的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Welcome to Swift - About Swift]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/09/14/welcome-to-swift-about-swift/"/>
    <updated>2014-09-14T16:20:47+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/09/14/welcome-to-swift-about-swift</id>
    <content type="html"><![CDATA[<p>Swift是一门建立在C和Objective-C的优点之上，而又没有C兼容性限制的用来编写iOS和OS X应用的编程语言。Swift采用了安全的编程模式，并且添加了许多现代语言的特性来使编程更简单，更灵活而且更有意思。全新的Swift，加上成熟且备受喜爱的Cocoa和CocoaTouch的框架，将让我们去重新想象如何开发软件。</p>

<p>创建Swift已经好几年了。Apple通过改进现有的编译器，调试器和基础框架来为Swift打基础。我们通过ARC来简化内存管理。我们建立在Foundation和Cocoa的框架栈也全部标准化和现代化。Objective-C也支持了Block，容器字面量(collection literals)和模块（modules），这些使得框架在适应现代语言的时候不会出现问题。就是因为这些改进，我们才能够在现在为我们今后软件开发介绍一门的新的语言。</p>

<p>Objective-C的开发者不会觉得Swift太陌生。Swift应用了Objc的命名参数的可读性还有Objc的动态对象模型。它还提供了无缝的访问Cocoa框架以及Objc代码混编的能力。在这些基础之上，Swift还提供了很多新的特性，并统一了语言中过程化和面向对象的部分。</p>

<p>Swift对于新人来说一样友好。他是第一个产业品质的系统编程语言，但是同时又像脚本语言一样有趣和非常强的表达能力。它支持Playground，一种可以让程序员不用编译，运行程序而直接看到结果的特性。</p>

<p>Swift将苹果广阔的工程文化里的智慧和现代语言最好的思想结合在一起。编译器为了性能而优化，语言为了开发而优化，两者都不舍弃。Swift可以很好的从简单的hello，world伸缩到整个操作系统。所有这些都将使得Swift成为开发者和苹果一个明智的投资。</p>

<p>Swift提供了一个非常好的方式来开发iOS和OS X应用，并且它也会持续改进。我们对于Swift的未来是有远大目标的。我们也迫不及待的希望看到你用它来创造的东西。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Translate the Swift Programming Language]]></title>
    <link href="http://zxhfirefox.github.io/blog/2014/09/14/translate-the-swift-programming-language/"/>
    <updated>2014-09-14T14:26:00+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2014/09/14/translate-the-swift-programming-language</id>
    <content type="html"><![CDATA[<p>This blog was created a long time ago, I did not write any meaningful things.</p>

<p>As Apple release the swift programming language 1.0, I think I want to write something.</p>

<p>The first goal is trying to translate the Swift Programming Language.</p>

<p>Hope I can make it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Blood]]></title>
    <link href="http://zxhfirefox.github.io/blog/2013/08/14/first-blood/"/>
    <updated>2013-08-14T01:08:00+08:00</updated>
    <id>http://zxhfirefox.github.io/blog/2013/08/14/first-blood</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>

---
layout: post
title: "Language Guide: Basic Operators"
date: 2014-10-01 14:34:09 +0800
comments: true
categories: [Swift]
---

操作符是用来检查，改变或者组合值的一个特殊符号或词组。例如，加号用来做加法。还有更复杂的例如逻辑与和自增运算符。

Swift支持绝大多数C的操作符，并改进他们的能力来消除一些常犯的错误。赋值操作符＝不再返回值，这样就避免要用==而不小心写成=的错误。算术操作符检查值的范围，不允许值超出范围，这样可以避免运算结果太大或太小。你也可以通过使用溢出操作符来引入溢出行为。

和C不一样，Swift允许你对浮点数做取余操作。Swift也提供了2个区间操作符,a..<b和a...b。

这里将描述基础操作符，高级操作符将在高级操作符那里讲解。

<!--more-->

#####	术语

操作符可以是一元的， 二元的或三元的：
	*	一元操作符处理单个值，一元操作符都紧挨着操作数。
	* 	二元操作符处理两个值，在他们中间。
	*  	三元操作符处理三个值，和C一样，Swift只有一个三元操作符，(a ? b : c)。

操作符影响的值叫操作数，在表达式 1 ＋ 2里， ＋ 是一个二元操作符，1和2是两个操作数。

#####	赋值操作符

赋值操作符（a＝b）用b的值初始化或更新a的值。

``` swift
let b = 10
var a = 5
a = b
```

如果赋值操作符右边的是一个元组，那么它的元素可以一起被拆解出来：

``` swift
let (x,y) = (1,2)
```

和C,ObjC不一样，赋值操作符不返回任何值。下面的语句是错误的：

``` swift
if x = y {
}
```

这个特性是避免在想写==的时候写成了=。

#####	算术操作符

Swift支持四种算术操作符，可以用于任何数字类型：

*	加
* 	减
*  	乘
* 	除

和C不一样，Swift默认不允许算术操作符溢出。你可以通过溢出操作符来改变这个。

加号也可以用于链接字符串：

``` swift
"hello," + " world"
```

两个字符值（Character）或一个字符值，一个字符串，也可以用加号来链接起来成为一个字符串。

######	取余操作符

取余操作符（a ％ b），计算b乘以多少可以取道小于a的最大数，然后返回剩下的值，也叫余数。

	注意
	取余操作符有时候也叫取模操作符，但是在Swift里，对于负数而言，％是取余而不是取模。

9%4是1.

为了计算答案，％使用下面的公式：

a = (b * multiplier) + remainder

multiplier是最大的值，然后返回remainder。

9 ＝ 4 ＊ 2 ＋ 1.

a是负数也一样：

－9 ％ 4 ＝ －1

b的符号会被直接忽略，意味着 a ％ b 和 a ％ －b永远一样。

######	浮点数取余操作

和C,ObjC不一样，取余操作在Swift可以用于浮点数：

8 % 2.5 = 0.5

8 ＝ 2.5 ＊ 3 ＋ 0.5

######	自增和自减操作符

和C一样，Swift提供了自增和自减操作符，来增加1或减少1操作数的值。这2个操作符可用于整数和浮点数。

``` swift
var i = 0
++i
```

每次调用＋＋i，i的值都会加1。－－i，则每次减一。

＋＋和－－可以作为前缀，也可以作为后缀，++i和i++都是可以的。同理，--i和i--也是都可以的。

注意，这两个操作符改变了i并且返回一个值。如果你关系这个值，那么前缀和后缀是没有区别的。但是如果你需要这个值，那么前缀和后缀是不一样的，有下面的规则：

*	如果是前缀，先改变值，后返回值。
* 	如果是后缀，先返回值，后改变值。

例如：

``` swift
var a = 0
let b = ++a //a and b both is 1
let c = a++ //c is 1, a is 2
```

除非你有特殊要要求，你该使用前缀，因为它最符合语义，改变值，返回值。

######	一元减号

数字的符号由一元减号来表示。

``` swift
let three = 3
let minusThree = -three
let plusThree = -minusThree
```

######	一元加号

一元加号直接返回值，不做任何改变

``` swift
let minusSix = -6
let alsominusSix = +minusSix
```

尽管一元加号不改变任何值，但是你可以用它来和一元减号相匹配来保持代码一致。

#####	组合赋值操作符

和C一样，Swift提供了组合赋值操作符。例如：

``` swift
var a = 1
a += 2
```

	注意
	组合赋值操作符，不返回任何值，和自增，自减不一样。

#####	比较操作符

Swift支持所有的C的操作符：

*	相等（a == b)
* 	不等（a != b)
*  	大于（a > b)
*  	小于（a < b)
*   大于等于(a >= b)
*   小于等于(a <= b)


		注意
		Swift还提供了相同操作符，===和!==，可以用来比较两个对象的引用是否指向同一个的对象。

每一个比较操作符都返回一个Bool来表示是否为真：

``` swift
1 == 1
2 != 1
2 > 1
1 < 2
1 >= 1
2 <= 1
```

比较操作符通常用于条件语句中，例如if：

``` swift
let name = "world"
if name == "world" {
	println("hello,world")
} else {
	println("I'm sorry \(name), but I don't recognize you")
}
```

#####	三元条件操作符

三元条件操作符，还有三个部分，类似于 question ? answer1 : answer2。如果question是true，返回answer1的值，如果是false，返回answer2的值。它也可以写为：

``` swift
if question {
	answer1
}else{
	answer2
}
```

下面的例子计算一个table的高度。

``` swift
let contentHeight = 40
let hasHeader = true
let rowHeight ＝ contentHeight + (hasHeader ? 50 : 20)
```

三元条件操作符在一些情况下比if－else更简练。

#####	nil合并操作符

nil合并操作符（a ?? b)，如果optional a有值，那么解包返回这个值，如果没有值，返回一个默认值b。a永远都是一个optional，b永远都是a里包含的值的类型。

nil合并操作符可以理解为下面代码的简写：

``` swift
a != nil ? a! : b
```

nil合并操作符比上面的代码更简练。	

	注意
	如果a的值不是nil，那么b不会执行。

#####	区间操作符

区间操作符有2个。

######	闭区间操作符

闭区间操作符，a...b。包含b。

``` swift
for index in 1...5 {
	println("\(index) times 5 is \(index * 5)")
}
```

######	半开区间操作符

半开区间操作符 a..<b。不包含b。

``` swift
let names = ["Anna", "Alex", "Brian", "Jack"]
let count = names.count
for i in 0..<count {
    println("Person \(i + 1) is called \(names[i])")
}
```

#####	逻辑操作符

逻辑操作符，修改或组合逻辑值。

*	逻辑否	!a
* 	逻辑与	a && b
*  逻辑或	a || b

######	逻辑否

``` swift
let a = true
let b = !a // false
let c = !b // true
```

######	逻辑与

两个都为真，才真，如果a为假，b不计算，直接返回假。

######	逻辑或

两个有一个为真，就为真，如果a为真，b不计算，直接返回真。

######	组合逻辑运算符

######	显式的圆括号

有时候为了让代码可读性更好，在合适的地方添加括弧可以清晰的表达运算的优先级。














